// Implementation file for parser generated by fsyacc
module ModuleParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "ModuleParser.fsy"

open System
open CommonDslAst
open ModuleDslAst
open TextUtilities
open Common
open CompilationUnit
open System.Collections.Generic
open Errors
open Positioning
open DataStructures
open Navigation

let mutable errorLogger = Unchecked.defaultof<ErrorLogger>

let reportRangeI posRange msg = reportRange posRange msg errorLogger

let reportPointI pos msg = reportPoint pos msg errorLogger

let testIndex   = PositionSet<ModuleIndexTerm>()

let addTestIdx posRange term = testIndex.Insert(PositionIndex(posRange, term))

let separateRegistrations registrations = 
    let rec separateRec classRegs moduleRegs = function
        | RegistrationTerm.Class(a, b, c, d, e)::t  -> 
            let classReg = 
                {
                    Dependency = a;
                    Implementation = b;
                    DependencyPosition = c;
                    ArrowTermPosition = d;
                    ImplementationPosition = e;
                } 
            (classReg::classRegs, moduleRegs, t) |||> separateRec
        | RegistrationTerm.Module(a, b, c)::t -> 
            let moduleReg = 
                {
                    Name = a;
                    ModuleTermPosition = b;
                    NamePosition = c;
                }
            (classRegs, moduleReg::moduleRegs, t) |||> separateRec
        | _::t -> (classRegs, moduleRegs, t) |||> separateRec
        | [] -> (classRegs, moduleRegs)

    separateRec [] [] registrations

let separateModule lexems = 
    let rec separateRec (classRegistrations:  ClassRegistration list) (moduleRegistrations:  ModuleRegistration list) = function
        | ModuleBody.Registration(r)::t -> 
            let classRegs, moduleRegs = separateRegistrations r
            (List.append classRegs classRegistrations, List.append moduleRegs moduleRegistrations, t) |||> separateRec
        | any::t -> (classRegistrations, moduleRegistrations, t) |||> separateRec
        | []     -> (classRegistrations, moduleRegistrations)

    separateRec [] [] lexems

let useValidUsings usings =
    let rec useValid usings acc = 
        match usings with 
            | Using.Fqn(s, _)::t -> (t, s::acc) ||> useValid
            | Using.Iqn(_)::t 
            | Using.Orphan(_)::t -> (t, acc) ||> useValid
            | [] -> acc
    useValid usings []

# 74 "ModuleParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | USING
  | SNAME of (string)
  | IQN of (string)
  | FQN of (string)
  | MODULE
  | QUOT
  | ARROW
  | MODULEHEADER
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_USING
    | TOKEN_SNAME
    | TOKEN_IQN
    | TOKEN_FQN
    | TOKEN_MODULE
    | TOKEN_QUOT
    | TOKEN_ARROW
    | TOKEN_MODULEHEADER
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startparseModule
    | NONTERM_parseModule
    | NONTERM_moduleHeader
    | NONTERM_moduleCompilationUnit
    | NONTERM_modules
    | NONTERM_moduleBody
    | NONTERM_moduleBodyExpression
    | NONTERM_moduleExpressionSet
    | NONTERM_usings
    | NONTERM_using
    | NONTERM_registrationSet
    | NONTERM_registration
    | NONTERM_name
    | NONTERM_errorRegistration
    | NONTERM_errorExprBody
    | NONTERM_errToken
    | NONTERM_recover
    | NONTERM_any

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | USING  -> 1 
  | SNAME _ -> 2 
  | IQN _ -> 3 
  | FQN _ -> 4 
  | MODULE  -> 5 
  | QUOT  -> 6 
  | ARROW  -> 7 
  | MODULEHEADER  -> 8 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_USING 
  | 2 -> TOKEN_SNAME 
  | 3 -> TOKEN_IQN 
  | 4 -> TOKEN_FQN 
  | 5 -> TOKEN_MODULE 
  | 6 -> TOKEN_QUOT 
  | 7 -> TOKEN_ARROW 
  | 8 -> TOKEN_MODULEHEADER 
  | 11 -> TOKEN_end_of_input
  | 9 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startparseModule 
    | 1 -> NONTERM_parseModule 
    | 2 -> NONTERM_parseModule 
    | 3 -> NONTERM_moduleHeader 
    | 4 -> NONTERM_moduleHeader 
    | 5 -> NONTERM_moduleHeader 
    | 6 -> NONTERM_moduleCompilationUnit 
    | 7 -> NONTERM_moduleCompilationUnit 
    | 8 -> NONTERM_modules 
    | 9 -> NONTERM_modules 
    | 10 -> NONTERM_moduleBody 
    | 11 -> NONTERM_moduleBody 
    | 12 -> NONTERM_moduleBodyExpression 
    | 13 -> NONTERM_moduleBodyExpression 
    | 14 -> NONTERM_moduleExpressionSet 
    | 15 -> NONTERM_moduleExpressionSet 
    | 16 -> NONTERM_usings 
    | 17 -> NONTERM_usings 
    | 18 -> NONTERM_using 
    | 19 -> NONTERM_using 
    | 20 -> NONTERM_using 
    | 21 -> NONTERM_using 
    | 22 -> NONTERM_registrationSet 
    | 23 -> NONTERM_registrationSet 
    | 24 -> NONTERM_registration 
    | 25 -> NONTERM_registration 
    | 26 -> NONTERM_registration 
    | 27 -> NONTERM_name 
    | 28 -> NONTERM_name 
    | 29 -> NONTERM_name 
    | 30 -> NONTERM_errorRegistration 
    | 31 -> NONTERM_errorRegistration 
    | 32 -> NONTERM_errorRegistration 
    | 33 -> NONTERM_errorRegistration 
    | 34 -> NONTERM_errorRegistration 
    | 35 -> NONTERM_errorRegistration 
    | 36 -> NONTERM_errorExprBody 
    | 37 -> NONTERM_errorExprBody 
    | 38 -> NONTERM_errToken 
    | 39 -> NONTERM_recover 
    | 40 -> NONTERM_any 
    | 41 -> NONTERM_any 
    | 42 -> NONTERM_any 
    | 43 -> NONTERM_any 
    | 44 -> NONTERM_any 
    | 45 -> NONTERM_any 
    | 46 -> NONTERM_any 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 11 
let _fsyacc_tagOfErrorTerminal = 9

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | USING  -> "USING" 
  | SNAME _ -> "SNAME" 
  | IQN _ -> "IQN" 
  | FQN _ -> "FQN" 
  | MODULE  -> "MODULE" 
  | QUOT  -> "QUOT" 
  | ARROW  -> "ARROW" 
  | MODULEHEADER  -> "MODULEHEADER" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | USING  -> (null : System.Object) 
  | SNAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IQN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FQN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | MODULE  -> (null : System.Object) 
  | QUOT  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
  | MODULEHEADER  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 3us; 65535us; 0us; 13us; 8us; 13us; 11us; 13us; 1us; 65535us; 0us; 2us; 3us; 65535us; 0us; 10us; 8us; 9us; 11us; 12us; 3us; 65535us; 0us; 11us; 8us; 11us; 11us; 11us; 2us; 65535us; 13us; 18us; 14us; 17us; 1us; 65535us; 13us; 14us; 2us; 65535us; 0us; 8us; 19us; 20us; 2us; 65535us; 0us; 19us; 19us; 19us; 2us; 65535us; 13us; 15us; 14us; 15us; 3us; 65535us; 13us; 25us; 14us; 25us; 15us; 26us; 6us; 65535us; 13us; 27us; 14us; 27us; 15us; 27us; 27us; 36us; 28us; 29us; 37us; 38us; 3us; 65535us; 13us; 32us; 14us; 32us; 15us; 32us; 2us; 65535us; 13us; 16us; 14us; 16us; 0us; 65535us; 3us; 65535us; 13us; 40us; 14us; 40us; 16us; 39us; 3us; 65535us; 0us; 7us; 8us; 7us; 11us; 7us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 7us; 9us; 13us; 17us; 20us; 22us; 25us; 28us; 31us; 35us; 42us; 46us; 49us; 50us; 54us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 2us; 3us; 3us; 4us; 40us; 1us; 3us; 1us; 5us; 1us; 6us; 1us; 6us; 1us; 7us; 2us; 8us; 9us; 1us; 8us; 2us; 10us; 11us; 2us; 10us; 14us; 2us; 12us; 23us; 2us; 13us; 36us; 1us; 14us; 1us; 15us; 2us; 16us; 17us; 1us; 16us; 4us; 18us; 19us; 20us; 21us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 22us; 1us; 23us; 4us; 24us; 30us; 31us; 32us; 2us; 24us; 32us; 1us; 24us; 2us; 25us; 35us; 1us; 25us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 31us; 2us; 33us; 34us; 1us; 33us; 1us; 36us; 1us; 37us; 1us; 39us; 1us; 41us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 45us; 1us; 46us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 14us; 16us; 18us; 20us; 22us; 24us; 27us; 29us; 32us; 35us; 38us; 41us; 43us; 45us; 48us; 50us; 55us; 57us; 59us; 61us; 63us; 65us; 70us; 73us; 75us; 78us; 80us; 82us; 84us; 86us; 88us; 90us; 93us; 95us; 97us; 99us; 101us; 103us; 105us; 107us; 109us; 111us; |]
let _fsyacc_action_rows = 48
let _fsyacc_actionTableElements = [|9us; 32768us; 0us; 4us; 1us; 21us; 2us; 47us; 3us; 46us; 4us; 45us; 5us; 44us; 6us; 43us; 7us; 42us; 8us; 5us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 0us; 16386us; 1us; 16388us; 2us; 6us; 0us; 16387us; 0us; 16389us; 7us; 32768us; 2us; 47us; 3us; 46us; 4us; 45us; 5us; 44us; 6us; 43us; 7us; 42us; 8us; 5us; 0us; 16390us; 0us; 16391us; 7us; 16393us; 2us; 47us; 3us; 46us; 4us; 45us; 5us; 44us; 6us; 43us; 7us; 42us; 8us; 5us; 0us; 16392us; 6us; 16395us; 2us; 33us; 3us; 35us; 4us; 34us; 5us; 30us; 7us; 37us; 9us; 41us; 6us; 16394us; 2us; 33us; 3us; 35us; 4us; 34us; 5us; 30us; 7us; 37us; 9us; 41us; 5us; 16396us; 2us; 33us; 3us; 35us; 4us; 34us; 5us; 30us; 7us; 37us; 1us; 16397us; 9us; 41us; 0us; 16398us; 0us; 16399us; 1us; 16401us; 1us; 21us; 0us; 16400us; 3us; 16405us; 2us; 22us; 3us; 23us; 4us; 24us; 0us; 16402us; 0us; 16403us; 0us; 16404us; 0us; 16406us; 0us; 16407us; 4us; 16414us; 2us; 33us; 3us; 35us; 4us; 34us; 7us; 28us; 3us; 16416us; 2us; 33us; 3us; 35us; 4us; 34us; 0us; 16408us; 1us; 16419us; 2us; 31us; 0us; 16409us; 0us; 16410us; 0us; 16411us; 0us; 16412us; 0us; 16413us; 0us; 16415us; 3us; 16418us; 2us; 33us; 3us; 35us; 4us; 34us; 0us; 16417us; 0us; 16420us; 0us; 16421us; 0us; 16423us; 0us; 16425us; 0us; 16426us; 0us; 16427us; 0us; 16428us; 0us; 16429us; 0us; 16430us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 10us; 11us; 13us; 14us; 15us; 17us; 18us; 19us; 27us; 28us; 29us; 37us; 38us; 45us; 52us; 58us; 60us; 61us; 62us; 64us; 65us; 69us; 70us; 71us; 72us; 73us; 74us; 79us; 83us; 84us; 86us; 87us; 88us; 89us; 90us; 91us; 92us; 96us; 97us; 98us; 99us; 100us; 101us; 102us; 103us; 104us; 105us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 2us; 1us; 1us; 2us; 1us; 2us; 1us; 2us; 1us; 1us; 1us; 2us; 1us; 2us; 1us; 2us; 2us; 2us; 1us; 1us; 2us; 3us; 2us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 2us; 1us; 1us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 1us; 2us; 2us; 2us; 3us; 3us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 8us; 8us; 9us; 9us; 9us; 9us; 10us; 10us; 11us; 11us; 11us; 12us; 12us; 12us; 13us; 13us; 13us; 13us; 13us; 13us; 14us; 14us; 15us; 16us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 65535us; 16387us; 16389us; 65535us; 16390us; 16391us; 65535us; 16392us; 65535us; 65535us; 65535us; 65535us; 16398us; 16399us; 65535us; 16400us; 65535us; 16402us; 16403us; 16404us; 16406us; 16407us; 65535us; 65535us; 16408us; 65535us; 16409us; 16410us; 16411us; 16412us; 16413us; 16415us; 65535us; 16417us; 16420us; 16421us; 16423us; 16425us; 16426us; 16427us; 16428us; 16429us; 16430us; |]
let _fsyacc_reductions ()  =    [| 
# 240 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : ModuleCompilationUnit)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startparseModule));
# 249 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleCompilationUnit)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "ModuleParser.fsy"
                                                       _1 
                   )
# 85 "ModuleParser.fsy"
                 : ModuleCompilationUnit));
# 260 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "ModuleParser.fsy"
                                 {ModuleCompilationUnit.Usings = []; Declarations = []; Errors = []; } 
                   )
# 86 "ModuleParser.fsy"
                 : ModuleCompilationUnit));
# 270 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "ModuleParser.fsy"
                                                ModuleHeader.Full(_2, posRange parseState 1, posRange parseState 2) 
                   )
# 89 "ModuleParser.fsy"
                 : 'moduleHeader));
# 281 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "ModuleParser.fsy"
                               
                                 (endPos parseState 1, ErrMsg.TestNameIsNotDefined) ||> reportPointI
                                 ModuleHeader.Partial(posRange parseState 1)
                             
                   )
# 91 "ModuleParser.fsy"
                 : 'moduleHeader));
# 294 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'any)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "ModuleParser.fsy"
                               
                                 let errPos, errToken = _1
                                 let term = ModuleHeader.Error(errPos, errToken)
                                 (errPos, ErrMsg.TestHeaderExpected) ||> reportRangeI
                                 //(errPos, ModuleHeaderTerm term)  ||> addTestIdx
                                 
                                 term
                             
                   )
# 96 "ModuleParser.fsy"
                 : 'moduleHeader));
# 312 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'usings)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'modules)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "ModuleParser.fsy"
                                           
                                            {ModuleCompilationUnit.Usings = useValidUsings _1; Declarations = _2; Errors = errorLogger.Diagnostics; }
                                          
                   )
# 106 "ModuleParser.fsy"
                 : 'moduleCompilationUnit));
# 326 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'modules)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "ModuleParser.fsy"
                                           
                                            {ModuleCompilationUnit.Usings = []; Declarations = _1; Errors = errorLogger.Diagnostics; } 
                                          
                   )
# 109 "ModuleParser.fsy"
                 : 'moduleCompilationUnit));
# 339 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleBody)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'modules)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "ModuleParser.fsy"
                                                _1::_2 
                   )
# 114 "ModuleParser.fsy"
                 : 'modules));
# 351 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleBody)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "ModuleParser.fsy"
                                                [_1] 
                   )
# 115 "ModuleParser.fsy"
                 : 'modules));
# 362 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleHeader)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleExpressionSet)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "ModuleParser.fsy"
                              
                                 (posRange parseState 1, _1 |> ModuleHeaderTerm) ||> addTestIdx
                                 let classRegistrations, moduleRegistrations = separateModule _2
                                 ModuleDeclaration.Module(_1, classRegistrations, moduleRegistrations, posRangeOut parseState 1 2)
                             
                   )
# 119 "ModuleParser.fsy"
                 : 'moduleBody));
# 378 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleHeader)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "ModuleParser.fsy"
                              
                                 (posRange parseState 1, _1 |> ModuleHeaderTerm) ||> addTestIdx
                                 ModuleDeclaration.Module(_1, [], [], posRange parseState 1)
                             
                   )
# 125 "ModuleParser.fsy"
                 : 'moduleBody));
# 392 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'registrationSet)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "ModuleParser.fsy"
                                             ModuleBody.Registration(_1 |> List.rev) 
                   )
# 131 "ModuleParser.fsy"
                 : 'moduleBodyExpression));
# 403 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'errorExprBody)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "ModuleParser.fsy"
                                             
                                             let pos  = posRange parseState 1
                                             let term = pos |> ErrorTerm.Error
                                             (pos, (term, _1) |> ModuleIndexTerm.Error) ||> addTestIdx
                                             term |> ModuleBody.Error
                                           
                   )
# 132 "ModuleParser.fsy"
                 : 'moduleBodyExpression));
# 419 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleExpressionSet)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleBodyExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "ModuleParser.fsy"
                                                                       _2::_1 |> List.rev 
                   )
# 140 "ModuleParser.fsy"
                 : 'moduleExpressionSet));
# 431 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'moduleBodyExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "ModuleParser.fsy"
                                                   [_1] 
                   )
# 141 "ModuleParser.fsy"
                 : 'moduleExpressionSet));
# 442 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'using)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'usings)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "ModuleParser.fsy"
                                          _1::_2 
                   )
# 144 "ModuleParser.fsy"
                 : 'usings));
# 454 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'using)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "ModuleParser.fsy"
                                          [ _1 ] 
                   )
# 145 "ModuleParser.fsy"
                 : 'usings));
# 465 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "ModuleParser.fsy"
                                         
                                         let term = Using.Fqn(_2, posRangeOut parseState 1 2)
                                         (posRangeOut parseState 1 2, UsingTerm term) ||> addTestIdx
                                         term
                                       
                   )
# 148 "ModuleParser.fsy"
                 : 'using));
# 480 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "ModuleParser.fsy"
                                        
                                         let term = Using.Iqn(_2, posRangeOut parseState 1 2)
                                         (posRangeOut parseState 1 2, UsingTerm term) ||> addTestIdx
                                         term
                                       
                   )
# 153 "ModuleParser.fsy"
                 : 'using));
# 495 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "ModuleParser.fsy"
                                        
                                         let term = Using.Fqn(_2, posRangeOut parseState 1 2)
                                         (posRangeOut parseState 1 2, UsingTerm term) ||> addTestIdx
                                         (posRange parseState 2, ErrMsg.IncompleteName _2) ||> reportRangeI
                                         term
                                       
                   )
# 158 "ModuleParser.fsy"
                 : 'using));
# 511 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "ModuleParser.fsy"
                                        
                                         let term = Using.Orphan(posRange parseState 1)
                                         (posRange parseState 1, UsingTerm term) ||> addTestIdx
                                         (endPos parseState 1, ErrMsg.MissingNamespace) ||> reportPointI
                                         term
                                       
                   )
# 164 "ModuleParser.fsy"
                 : 'using));
# 526 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'registration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "ModuleParser.fsy"
                                         
                                          (posRange parseState 1, _1 |> RegistrationTerm) ||> addTestIdx
                                          [_1]
                                        
                   )
# 172 "ModuleParser.fsy"
                 : 'registrationSet));
# 540 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'registrationSet)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'registration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "ModuleParser.fsy"
                                          
                                          (posRange parseState 2, _2 |> RegistrationTerm) ||> addTestIdx
                                          _2::_1 
                                        
                   )
# 177 "ModuleParser.fsy"
                 : 'registrationSet));
# 555 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'name)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'name)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 183 "ModuleParser.fsy"
                                               RegistrationTerm.Class(_1, _3, posRange parseState 1, posRange parseState 2, posRange parseState 3) 
                   )
# 183 "ModuleParser.fsy"
                 : 'registration));
# 567 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 184 "ModuleParser.fsy"
                                               RegistrationTerm.Module(_2, posRange parseState 1, posRange parseState 2) 
                   )
# 184 "ModuleParser.fsy"
                 : 'registration));
# 578 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'errorRegistration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 185 "ModuleParser.fsy"
                                            _1 
                   )
# 185 "ModuleParser.fsy"
                 : 'registration));
# 589 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 188 "ModuleParser.fsy"
                                   _1 
                   )
# 188 "ModuleParser.fsy"
                 : 'name));
# 600 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 189 "ModuleParser.fsy"
                                   _1 
                   )
# 189 "ModuleParser.fsy"
                 : 'name));
# 611 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 190 "ModuleParser.fsy"
                                   
                                   let lexbuf = parseState.ParserLocalStore.["LexBuffer"] :?> LexBuffer<char>
                                   (posRange parseState 1, ErrMsg.IncompleteName (new string(lexbuf.Lexeme))) ||> reportRangeI
                                   _1
                                 
                   )
# 190 "ModuleParser.fsy"
                 : 'name));
# 626 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'name)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 197 "ModuleParser.fsy"
                                       
                                        (endPos parseState 1, ErrMsg.ArrowMissing) ||> reportPointI
                                        RegistrationTerm.ClassError(ClassRegMissingPart.ArrowAfter(endPos parseState 1)) 
                                      
                   )
# 197 "ModuleParser.fsy"
                 : 'errorRegistration));
# 640 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'name)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'name)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 201 "ModuleParser.fsy"
                                     
                                        (endPos parseState 1, ErrMsg.ArrowMissing) ||> reportPointI
                                        RegistrationTerm.ClassError(ClassRegMissingPart.ArrowBetween(posRangeIn parseState 1 2)) 
                                      
                   )
# 201 "ModuleParser.fsy"
                 : 'errorRegistration));
# 655 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'name)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 205 "ModuleParser.fsy"
                                     
                                        (endPos parseState 2, ErrMsg.FqnMissing) ||> reportPointI
                                        RegistrationTerm.ClassError(ClassRegMissingPart.ImplName(endPos parseState 2))
                                      
                   )
# 205 "ModuleParser.fsy"
                 : 'errorRegistration));
# 669 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'name)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 209 "ModuleParser.fsy"
                                        
                                        (endPos parseState 1, ErrMsg.FqnMissing) ||> reportPointI
                                        RegistrationTerm.ClassError(ClassRegMissingPart.DepName(posRangeOut parseState 1 2))
                                      
                   )
# 209 "ModuleParser.fsy"
                 : 'errorRegistration));
# 683 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 213 "ModuleParser.fsy"
                                       
                                        (startPos parseState 1, ErrMsg.OrphanArrow) ||> reportPointI
                                        RegistrationTerm.ClassError(ClassRegMissingPart.OrphanArrow(posRange parseState 1))
                                      
                   )
# 213 "ModuleParser.fsy"
                 : 'errorRegistration));
# 696 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 217 "ModuleParser.fsy"
                                     
                                        (endPos parseState 1, ErrMsg.FqnMissing) ||> reportPointI
                                        RegistrationTerm.ModuleError(ModuleRegMissingPart.Name(endPos parseState 1))
                                      
                   )
# 217 "ModuleParser.fsy"
                 : 'errorRegistration));
# 709 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'errorExprBody)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 223 "ModuleParser.fsy"
                                                   _2::_1 
                   )
# 223 "ModuleParser.fsy"
                 : 'errorExprBody));
# 721 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 224 "ModuleParser.fsy"
                                                   [ _1 ] 
                   )
# 224 "ModuleParser.fsy"
                 : 'errorExprBody));
# 732 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 227 "ModuleParser.fsy"
                                   
                                     let lexbuf   = parseState.ParserLocalStore.["LexBuffer"] :?> LexBuffer<char>
                                     let posRange = (lexbuf.StartPos, lexbuf.EndPos)
                                     let errToken = new string(lexbuf.Lexeme)
                                     (posRange, ErrMsg.UnexpectedToken errToken) ||>reportRangeI
                                     (posRange, errToken)
                                 
                   )
# 227 "ModuleParser.fsy"
                 : 'errToken));
# 749 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 237 "ModuleParser.fsy"
                              
                                 let lexbuf   = parseState.ParserLocalStore.["LexBuffer"] :?> LexBuffer<char>
                                 let posRange = (lexbuf.StartPos, lexbuf.EndPos)
                                 let errToken = new string(lexbuf.Lexeme)
                                 (posRange, ErrMsg.UnexpectedToken errToken) ||>reportRangeI
                                 (posRange, errToken)
                             
                   )
# 237 "ModuleParser.fsy"
                 : 'recover));
# 765 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 246 "ModuleParser.fsy"
                                          posRangeAndToken parseState 
                   )
# 246 "ModuleParser.fsy"
                 : 'any));
# 775 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 247 "ModuleParser.fsy"
                                          posRangeAndToken parseState 
                   )
# 247 "ModuleParser.fsy"
                 : 'any));
# 785 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 248 "ModuleParser.fsy"
                                          posRangeAndToken parseState 
                   )
# 248 "ModuleParser.fsy"
                 : 'any));
# 795 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 249 "ModuleParser.fsy"
                                          posRangeAndToken parseState 
                   )
# 249 "ModuleParser.fsy"
                 : 'any));
# 805 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 250 "ModuleParser.fsy"
                                          posRangeAndToken parseState 
                   )
# 250 "ModuleParser.fsy"
                 : 'any));
# 816 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 251 "ModuleParser.fsy"
                                          posRangeAndToken parseState 
                   )
# 251 "ModuleParser.fsy"
                 : 'any));
# 827 "ModuleParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 252 "ModuleParser.fsy"
                                          posRangeAndToken parseState 
                   )
# 252 "ModuleParser.fsy"
                 : 'any));
|]
# 839 "ModuleParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 12;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let parseModule lexer lexbuf : ModuleCompilationUnit =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
