// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open System
open TestDslAst
open CommonDslAst
open TextUtilities
open Common
open CompilationUnit
open System.Collections.Generic
open Errors
open Positioning
open DataStructures
open Navigation

let mutable errorLogger = Unchecked.defaultof<ErrorLogger>

let reportRangeI posRange msg = reportRange posRange msg errorLogger

let reportPointI pos msg = reportPoint pos msg errorLogger

let testIndex   = PositionSet<IndexTerm>()

let addTestIdx posRange term = testIndex.Insert(PositionIndex(posRange, term))

let separateRegistrations registrations = 
    let rec separateRec classRegs moduleRegs = function
        | RegistrationTerm.Class(a, b, c, d, e)::t  -> 
            let classReg = 
                {
                    Dependency = a;
                    Implementation = b;
                    DependencyPosition = c;
                    ArrowTermPosition = d;
                    ImplementationPosition = e;
                } 
            (classReg::classRegs, moduleRegs, t) |||> separateRec
        | RegistrationTerm.Module(a, b, c)::t -> 
            let moduleReg = 
                {
                    Name = a;
                    ModuleTermPosition = b;
                    NamePosition = c;
                }
            (classRegs, moduleReg::moduleRegs, t) |||> separateRec
        | _::t -> (classRegs, moduleRegs, t) |||> separateRec
        | [] -> (classRegs, moduleRegs)

    separateRec [] [] registrations

let separate lexems = 
    let rec separateRec (boolFlags1: BoolFlag1 list) (boolFlags2: BoolFlag2 list) (classRegistrations:  ClassRegistration list) (moduleRegistrations:  ModuleRegistration list) = function
        | (Declaration.BoolFlag1(BoolFlag1Term.Flag(a, b, c, d, e)))::t -> 
            let bFlag = { BoolFlag1.Value = a; BoolFlagPosition = b; EqualTermPosition = c; ValuePosition = d; WholePosition = e; }
            (bFlag::boolFlags1, boolFlags2, classRegistrations, moduleRegistrations, t)  |||||> separateRec 
        | (Declaration.BoolFlag2(BoolFlag2Term.Flag(a, b, c, d, e)))::t ->
            let bFlag = { BoolFlag2.Value = a; BoolFlagPosition = b; EqualTermPosition = c; ValuePosition = d; WholePosition = e; }
            (boolFlags1, bFlag::boolFlags2, classRegistrations, moduleRegistrations, t)  |||||> separateRec
        | Declaration.Registration(r)::t -> 
            let classRegs, moduleRegs = separateRegistrations r
            (boolFlags1, boolFlags2, List.append classRegs classRegistrations, List.append moduleRegs moduleRegistrations, t) |||||> separateRec
        | any::t -> (boolFlags1, boolFlags2, classRegistrations, moduleRegistrations, t) |||||> separateRec
        | []     -> (boolFlags1 |> List.rev, boolFlags2 |> List.rev, classRegistrations, moduleRegistrations)

    separateRec [] [] [] [] lexems

let useValidUsings usings =
    let rec useValid usings acc = 
        match usings with 
            | Using.Fqn(s, _)::t -> (t, s::acc) ||> useValid
            | Using.Iqn(_)::t 
            | Using.Orphan(_)::t -> (t, acc) ||> useValid
            | [] -> acc
    useValid usings []

# 80 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | USING
  | SNAME of (string)
  | IQN of (string)
  | FQN of (string)
  | MODULE
  | QUOT
  | FALSE
  | TRUE
  | BF2
  | BF1
  | EQ
  | ARROW
  | TESTHEADER
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_USING
    | TOKEN_SNAME
    | TOKEN_IQN
    | TOKEN_FQN
    | TOKEN_MODULE
    | TOKEN_QUOT
    | TOKEN_FALSE
    | TOKEN_TRUE
    | TOKEN_BF2
    | TOKEN_BF1
    | TOKEN_EQ
    | TOKEN_ARROW
    | TOKEN_TESTHEADER
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startparseDrt
    | NONTERM_parseDrt
    | NONTERM_testHeader
    | NONTERM_testCompilationUnit
    | NONTERM_tests
    | NONTERM_testBody
    | NONTERM_usings
    | NONTERM_using
    | NONTERM_expressionSet
    | NONTERM_bodyExpression
    | NONTERM_registrationSet
    | NONTERM_registration
    | NONTERM_name
    | NONTERM_boolFlag1
    | NONTERM_boolFlag2
    | NONTERM_boolValue
    | NONTERM_errorBoolFlag1
    | NONTERM_errorBoolFlag2
    | NONTERM_errorRegistration
    | NONTERM_errorExprBody
    | NONTERM_errToken
    | NONTERM_recover
    | NONTERM_any

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | USING  -> 1 
  | SNAME _ -> 2 
  | IQN _ -> 3 
  | FQN _ -> 4 
  | MODULE  -> 5 
  | QUOT  -> 6 
  | FALSE  -> 7 
  | TRUE  -> 8 
  | BF2  -> 9 
  | BF1  -> 10 
  | EQ  -> 11 
  | ARROW  -> 12 
  | TESTHEADER  -> 13 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_USING 
  | 2 -> TOKEN_SNAME 
  | 3 -> TOKEN_IQN 
  | 4 -> TOKEN_FQN 
  | 5 -> TOKEN_MODULE 
  | 6 -> TOKEN_QUOT 
  | 7 -> TOKEN_FALSE 
  | 8 -> TOKEN_TRUE 
  | 9 -> TOKEN_BF2 
  | 10 -> TOKEN_BF1 
  | 11 -> TOKEN_EQ 
  | 12 -> TOKEN_ARROW 
  | 13 -> TOKEN_TESTHEADER 
  | 16 -> TOKEN_end_of_input
  | 14 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startparseDrt 
    | 1 -> NONTERM_parseDrt 
    | 2 -> NONTERM_parseDrt 
    | 3 -> NONTERM_testHeader 
    | 4 -> NONTERM_testHeader 
    | 5 -> NONTERM_testHeader 
    | 6 -> NONTERM_testCompilationUnit 
    | 7 -> NONTERM_testCompilationUnit 
    | 8 -> NONTERM_tests 
    | 9 -> NONTERM_tests 
    | 10 -> NONTERM_testBody 
    | 11 -> NONTERM_testBody 
    | 12 -> NONTERM_usings 
    | 13 -> NONTERM_usings 
    | 14 -> NONTERM_using 
    | 15 -> NONTERM_using 
    | 16 -> NONTERM_using 
    | 17 -> NONTERM_using 
    | 18 -> NONTERM_expressionSet 
    | 19 -> NONTERM_expressionSet 
    | 20 -> NONTERM_bodyExpression 
    | 21 -> NONTERM_bodyExpression 
    | 22 -> NONTERM_bodyExpression 
    | 23 -> NONTERM_bodyExpression 
    | 24 -> NONTERM_registrationSet 
    | 25 -> NONTERM_registrationSet 
    | 26 -> NONTERM_registration 
    | 27 -> NONTERM_registration 
    | 28 -> NONTERM_registration 
    | 29 -> NONTERM_name 
    | 30 -> NONTERM_name 
    | 31 -> NONTERM_name 
    | 32 -> NONTERM_boolFlag1 
    | 33 -> NONTERM_boolFlag1 
    | 34 -> NONTERM_boolFlag2 
    | 35 -> NONTERM_boolFlag2 
    | 36 -> NONTERM_boolValue 
    | 37 -> NONTERM_boolValue 
    | 38 -> NONTERM_errorBoolFlag1 
    | 39 -> NONTERM_errorBoolFlag1 
    | 40 -> NONTERM_errorBoolFlag1 
    | 41 -> NONTERM_errorBoolFlag1 
    | 42 -> NONTERM_errorBoolFlag1 
    | 43 -> NONTERM_errorBoolFlag1 
    | 44 -> NONTERM_errorBoolFlag2 
    | 45 -> NONTERM_errorBoolFlag2 
    | 46 -> NONTERM_errorBoolFlag2 
    | 47 -> NONTERM_errorBoolFlag2 
    | 48 -> NONTERM_errorRegistration 
    | 49 -> NONTERM_errorRegistration 
    | 50 -> NONTERM_errorRegistration 
    | 51 -> NONTERM_errorRegistration 
    | 52 -> NONTERM_errorRegistration 
    | 53 -> NONTERM_errorRegistration 
    | 54 -> NONTERM_errorExprBody 
    | 55 -> NONTERM_errorExprBody 
    | 56 -> NONTERM_errToken 
    | 57 -> NONTERM_recover 
    | 58 -> NONTERM_any 
    | 59 -> NONTERM_any 
    | 60 -> NONTERM_any 
    | 61 -> NONTERM_any 
    | 62 -> NONTERM_any 
    | 63 -> NONTERM_any 
    | 64 -> NONTERM_any 
    | 65 -> NONTERM_any 
    | 66 -> NONTERM_any 
    | 67 -> NONTERM_any 
    | 68 -> NONTERM_any 
    | 69 -> NONTERM_any 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 16 
let _fsyacc_tagOfErrorTerminal = 14

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | USING  -> "USING" 
  | SNAME _ -> "SNAME" 
  | IQN _ -> "IQN" 
  | FQN _ -> "FQN" 
  | MODULE  -> "MODULE" 
  | QUOT  -> "QUOT" 
  | FALSE  -> "FALSE" 
  | TRUE  -> "TRUE" 
  | BF2  -> "BF2" 
  | BF1  -> "BF1" 
  | EQ  -> "EQ" 
  | ARROW  -> "ARROW" 
  | TESTHEADER  -> "TESTHEADER" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | USING  -> (null : System.Object) 
  | SNAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IQN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FQN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | MODULE  -> (null : System.Object) 
  | QUOT  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | BF2  -> (null : System.Object) 
  | BF1  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
  | TESTHEADER  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 3us; 65535us; 0us; 13us; 8us; 13us; 11us; 13us; 1us; 65535us; 0us; 2us; 3us; 65535us; 0us; 10us; 8us; 9us; 11us; 12us; 3us; 65535us; 0us; 11us; 8us; 11us; 11us; 11us; 2us; 65535us; 0us; 8us; 15us; 16us; 2us; 65535us; 0us; 15us; 15us; 15us; 1us; 65535us; 13us; 14us; 2us; 65535us; 13us; 22us; 14us; 21us; 2us; 65535us; 13us; 25us; 14us; 25us; 3us; 65535us; 13us; 27us; 14us; 27us; 25us; 28us; 6us; 65535us; 13us; 29us; 14us; 29us; 25us; 29us; 29us; 55us; 30us; 31us; 56us; 57us; 2us; 65535us; 13us; 23us; 14us; 23us; 2us; 65535us; 13us; 24us; 14us; 24us; 7us; 65535us; 13us; 52us; 14us; 52us; 38us; 49us; 39us; 40us; 42us; 54us; 43us; 44us; 50us; 51us; 2us; 65535us; 13us; 41us; 14us; 41us; 2us; 65535us; 13us; 45us; 14us; 45us; 3us; 65535us; 13us; 34us; 14us; 34us; 25us; 34us; 2us; 65535us; 13us; 26us; 14us; 26us; 0us; 65535us; 3us; 65535us; 13us; 59us; 14us; 59us; 26us; 58us; 3us; 65535us; 0us; 7us; 8us; 7us; 11us; 7us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 7us; 9us; 13us; 17us; 20us; 23us; 25us; 28us; 31us; 35us; 42us; 45us; 48us; 56us; 59us; 62us; 66us; 69us; 70us; 74us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 2us; 3us; 3us; 4us; 58us; 1us; 3us; 1us; 5us; 1us; 6us; 1us; 6us; 1us; 7us; 2us; 8us; 9us; 1us; 8us; 2us; 10us; 11us; 2us; 10us; 18us; 2us; 12us; 13us; 1us; 12us; 4us; 14us; 15us; 16us; 17us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 2us; 22us; 25us; 2us; 23us; 54us; 1us; 24us; 1us; 25us; 4us; 26us; 48us; 49us; 50us; 2us; 26us; 50us; 1us; 26us; 2us; 27us; 53us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 31us; 5us; 32us; 38us; 39us; 40us; 41us; 3us; 32us; 38us; 39us; 1us; 32us; 1us; 33us; 5us; 34us; 44us; 45us; 46us; 47us; 3us; 34us; 44us; 45us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 37us; 1us; 39us; 1us; 40us; 1us; 42us; 1us; 42us; 1us; 43us; 1us; 45us; 1us; 46us; 1us; 49us; 2us; 51us; 52us; 1us; 51us; 1us; 54us; 1us; 55us; 1us; 57us; 1us; 59us; 1us; 60us; 1us; 61us; 1us; 62us; 1us; 63us; 1us; 64us; 1us; 65us; 1us; 66us; 1us; 67us; 1us; 68us; 1us; 69us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 14us; 16us; 18us; 20us; 22us; 24us; 27us; 29us; 32us; 35us; 38us; 40us; 45us; 47us; 49us; 51us; 53us; 55us; 57us; 59us; 62us; 65us; 67us; 69us; 74us; 77us; 79us; 82us; 84us; 86us; 88us; 90us; 92us; 98us; 102us; 104us; 106us; 112us; 116us; 118us; 120us; 122us; 124us; 126us; 128us; 130us; 132us; 134us; 136us; 138us; 140us; 143us; 145us; 147us; 149us; 151us; 153us; 155us; 157us; 159us; 161us; 163us; 165us; 167us; 169us; 171us; |]
let _fsyacc_action_rows = 72
let _fsyacc_actionTableElements = [|14us; 32768us; 0us; 4us; 1us; 17us; 2us; 71us; 3us; 70us; 4us; 69us; 5us; 68us; 6us; 67us; 7us; 66us; 8us; 65us; 9us; 64us; 10us; 63us; 11us; 62us; 12us; 61us; 13us; 5us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 0us; 16386us; 1us; 16388us; 2us; 6us; 0us; 16387us; 0us; 16389us; 12us; 32768us; 2us; 71us; 3us; 70us; 4us; 69us; 5us; 68us; 6us; 67us; 7us; 66us; 8us; 65us; 9us; 64us; 10us; 63us; 11us; 62us; 12us; 61us; 13us; 5us; 0us; 16390us; 0us; 16391us; 12us; 16393us; 2us; 71us; 3us; 70us; 4us; 69us; 5us; 68us; 6us; 67us; 7us; 66us; 8us; 65us; 9us; 64us; 10us; 63us; 11us; 62us; 12us; 61us; 13us; 5us; 0us; 16392us; 11us; 16395us; 2us; 35us; 3us; 37us; 4us; 36us; 5us; 32us; 7us; 47us; 8us; 46us; 9us; 42us; 10us; 38us; 11us; 50us; 12us; 56us; 14us; 60us; 11us; 16394us; 2us; 35us; 3us; 37us; 4us; 36us; 5us; 32us; 7us; 47us; 8us; 46us; 9us; 42us; 10us; 38us; 11us; 50us; 12us; 56us; 14us; 60us; 1us; 16397us; 1us; 17us; 0us; 16396us; 3us; 16401us; 2us; 18us; 3us; 19us; 4us; 20us; 0us; 16398us; 0us; 16399us; 0us; 16400us; 0us; 16402us; 0us; 16403us; 0us; 16404us; 0us; 16405us; 5us; 16406us; 2us; 35us; 3us; 37us; 4us; 36us; 5us; 32us; 12us; 56us; 1us; 16407us; 14us; 60us; 0us; 16408us; 0us; 16409us; 4us; 16432us; 2us; 35us; 3us; 37us; 4us; 36us; 12us; 30us; 3us; 16434us; 2us; 35us; 3us; 37us; 4us; 36us; 0us; 16410us; 1us; 16437us; 2us; 33us; 0us; 16411us; 0us; 16412us; 0us; 16413us; 0us; 16414us; 0us; 16415us; 3us; 16425us; 7us; 47us; 8us; 46us; 11us; 39us; 3us; 16422us; 2us; 48us; 7us; 47us; 8us; 46us; 0us; 16416us; 0us; 16417us; 3us; 16431us; 7us; 47us; 8us; 46us; 11us; 43us; 3us; 16428us; 2us; 53us; 7us; 47us; 8us; 46us; 0us; 16418us; 0us; 16419us; 0us; 16420us; 0us; 16421us; 0us; 16423us; 0us; 16424us; 2us; 32768us; 7us; 47us; 8us; 46us; 0us; 16426us; 0us; 16427us; 0us; 16429us; 0us; 16430us; 0us; 16433us; 3us; 16436us; 2us; 35us; 3us; 37us; 4us; 36us; 0us; 16435us; 0us; 16438us; 0us; 16439us; 0us; 16441us; 0us; 16443us; 0us; 16444us; 0us; 16445us; 0us; 16446us; 0us; 16447us; 0us; 16448us; 0us; 16449us; 0us; 16450us; 0us; 16451us; 0us; 16452us; 0us; 16453us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 15us; 16us; 18us; 19us; 20us; 22us; 23us; 24us; 37us; 38us; 39us; 52us; 53us; 65us; 77us; 79us; 80us; 84us; 85us; 86us; 87us; 88us; 89us; 90us; 91us; 97us; 99us; 100us; 101us; 106us; 110us; 111us; 113us; 114us; 115us; 116us; 117us; 118us; 122us; 126us; 127us; 128us; 132us; 136us; 137us; 138us; 139us; 140us; 141us; 142us; 145us; 146us; 147us; 148us; 149us; 150us; 154us; 155us; 156us; 157us; 158us; 159us; 160us; 161us; 162us; 163us; 164us; 165us; 166us; 167us; 168us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 2us; 1us; 1us; 2us; 1us; 2us; 1us; 2us; 1us; 2us; 1us; 2us; 2us; 2us; 1us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 3us; 2us; 1us; 1us; 1us; 1us; 3us; 1us; 3us; 1us; 1us; 1us; 2us; 3us; 2us; 1us; 2us; 1us; 2us; 3us; 2us; 1us; 1us; 2us; 2us; 2us; 1us; 1us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 1us; 2us; 2us; 2us; 3us; 3us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 7us; 7us; 8us; 8us; 9us; 9us; 9us; 9us; 10us; 10us; 11us; 11us; 11us; 12us; 12us; 12us; 13us; 13us; 14us; 14us; 15us; 15us; 16us; 16us; 16us; 16us; 16us; 16us; 17us; 17us; 17us; 17us; 18us; 18us; 18us; 18us; 18us; 18us; 19us; 19us; 20us; 21us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 65535us; 16387us; 16389us; 65535us; 16390us; 16391us; 65535us; 16392us; 65535us; 65535us; 65535us; 16396us; 65535us; 16398us; 16399us; 16400us; 16402us; 16403us; 16404us; 16405us; 65535us; 65535us; 16408us; 16409us; 65535us; 65535us; 16410us; 65535us; 16411us; 16412us; 16413us; 16414us; 16415us; 65535us; 65535us; 16416us; 16417us; 65535us; 65535us; 16418us; 16419us; 16420us; 16421us; 16423us; 16424us; 65535us; 16426us; 16427us; 16429us; 16430us; 16433us; 65535us; 16435us; 16438us; 16439us; 16441us; 16443us; 16444us; 16445us; 16446us; 16447us; 16448us; 16449us; 16450us; 16451us; 16452us; 16453us; |]
let _fsyacc_reductions ()  =    [| 
# 304 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : TestCompilationUnit)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startparseDrt));
# 313 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'testCompilationUnit)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "Parser.fsy"
                                                     _1 
                   )
# 96 "Parser.fsy"
                 : TestCompilationUnit));
# 324 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "Parser.fsy"
                                 {TestCompilationUnit.Usings = []; Declarations = []; Errors = [] } 
                   )
# 97 "Parser.fsy"
                 : TestCompilationUnit));
# 334 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "Parser.fsy"
                                              TestHeader.Full(_2, posRange parseState 1, posRange parseState 2) 
                   )
# 100 "Parser.fsy"
                 : 'testHeader));
# 345 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "Parser.fsy"
                               
                                 (endPos parseState 1, ErrMsg.TestNameIsNotDefined) ||> reportPointI
                                 TestHeader.Partial(posRange parseState 1)
                             
                   )
# 102 "Parser.fsy"
                 : 'testHeader));
# 358 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'any)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "Parser.fsy"
                               
                                 let errPos, errToken = _1
                                 let term = HeaderError(errPos, errToken)
                                 (errPos, ErrMsg.TestHeaderExpected) ||> reportRangeI
                                 //(errPos, TestHeaderTerm term)  ||> addTestIdx
                                 
                                 term
                             
                   )
# 107 "Parser.fsy"
                 : 'testHeader));
# 376 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'usings)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'tests)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "Parser.fsy"
                                         
                                          {TestCompilationUnit.Usings = useValidUsings _1; Declarations = _2; Errors = errorLogger.Diagnostics; }
                                        
                   )
# 117 "Parser.fsy"
                 : 'testCompilationUnit));
# 390 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tests)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "Parser.fsy"
                                         
                                          {TestCompilationUnit.Usings = []; Declarations = _1; Errors = errorLogger.Diagnostics; } 
                                        
                   )
# 120 "Parser.fsy"
                 : 'testCompilationUnit));
# 403 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'testBody)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'tests)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "Parser.fsy"
                                            _1::_2 
                   )
# 125 "Parser.fsy"
                 : 'tests));
# 415 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'testBody)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "Parser.fsy"
                                            [_1] 
                   )
# 126 "Parser.fsy"
                 : 'tests));
# 426 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'testHeader)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expressionSet)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "Parser.fsy"
                              
                                 (posRange parseState 1, _1 |> TestHeaderTerm) ||> addTestIdx
                                 let boolFlags1, boolFlags2, classRegistrations, moduleRegistrations = separate _2
                                 Test(_1, boolFlags1, boolFlags2, classRegistrations, moduleRegistrations, posRangeOut parseState 1 2)
                             
                   )
# 132 "Parser.fsy"
                 : 'testBody));
# 442 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'testHeader)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "Parser.fsy"
                               
                                 (posRange parseState 1, _1 |> TestHeaderTerm) ||> addTestIdx
                                 Test(_1, [], [], [], [], posRange parseState 1)
                             
                   )
# 138 "Parser.fsy"
                 : 'testBody));
# 456 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'using)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'usings)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "Parser.fsy"
                                          _1::_2 
                   )
# 144 "Parser.fsy"
                 : 'usings));
# 468 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'using)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "Parser.fsy"
                                          [ _1 ] 
                   )
# 145 "Parser.fsy"
                 : 'usings));
# 479 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "Parser.fsy"
                                         
                                         let term = Using.Fqn(_2, posRangeOut parseState 1 2)
                                         (posRangeOut parseState 1 2, UsingTerm term) ||> addTestIdx
                                         term
                                       
                   )
# 148 "Parser.fsy"
                 : 'using));
# 494 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "Parser.fsy"
                                        
                                         let term = Using.Iqn(_2, posRangeOut parseState 1 2)
                                         (posRangeOut parseState 1 2, UsingTerm term) ||> addTestIdx
                                         term
                                       
                   )
# 153 "Parser.fsy"
                 : 'using));
# 509 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "Parser.fsy"
                                        
                                         let term = Using.Fqn(_2, posRangeOut parseState 1 2)
                                         (posRangeOut parseState 1 2, UsingTerm term) ||> addTestIdx
                                         (posRange parseState 2, ErrMsg.IncompleteName _2) ||> reportRangeI
                                         term
                                       
                   )
# 158 "Parser.fsy"
                 : 'using));
# 525 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "Parser.fsy"
                                        
                                         let term = Using.Orphan(posRange parseState 1)
                                         (posRange parseState 1, UsingTerm term) ||> addTestIdx
                                         (endPos parseState 1, ErrMsg.MissingNamespace) ||> reportPointI
                                         term
                                       
                   )
# 164 "Parser.fsy"
                 : 'using));
# 540 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expressionSet)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'bodyExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "Parser.fsy"
                                                           _2::_1 |> List.rev 
                   )
# 172 "Parser.fsy"
                 : 'expressionSet));
# 552 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bodyExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "Parser.fsy"
                                             [_1] 
                   )
# 173 "Parser.fsy"
                 : 'expressionSet));
# 563 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'boolFlag1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "Parser.fsy"
                                       
                                       (posRange parseState 1, _1 |> IndexTerm.BoolFlag1Term) ||> addTestIdx
                                       BoolFlag1(_1)
                                     
                   )
# 177 "Parser.fsy"
                 : 'bodyExpression));
# 577 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'boolFlag2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 182 "Parser.fsy"
                                       
                                       (posRange parseState 1, _1 |> IndexTerm.BoolFlag2Term) ||> addTestIdx
                                       BoolFlag2(_1)
                                     
                   )
# 182 "Parser.fsy"
                 : 'bodyExpression));
# 591 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'registrationSet)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 186 "Parser.fsy"
                                             Declaration.Registration(_1 |> List.rev) 
                   )
# 186 "Parser.fsy"
                 : 'bodyExpression));
# 602 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'errorExprBody)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 187 "Parser.fsy"
                                             
                                             let pos  = posRange parseState 1
                                             let term = pos |> ErrorTerm.Error
                                             (pos, (term, _1) |> IndexTerm.Error) ||> addTestIdx
                                             term |> Declaration.Error
                                           
                   )
# 187 "Parser.fsy"
                 : 'bodyExpression));
# 618 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'registration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 195 "Parser.fsy"
                                         
                                          (posRange parseState 1, _1 |> RegistrationTerm) ||> addTestIdx
                                          [_1]
                                        
                   )
# 195 "Parser.fsy"
                 : 'registrationSet));
# 632 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'registrationSet)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'registration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 200 "Parser.fsy"
                                          
                                          (posRange parseState 2, _2 |> RegistrationTerm) ||> addTestIdx
                                          _2::_1 
                                        
                   )
# 200 "Parser.fsy"
                 : 'registrationSet));
# 647 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'name)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'name)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 206 "Parser.fsy"
                                               RegistrationTerm.Class(_1, _3, posRange parseState 1, posRange parseState 2, posRange parseState 3) 
                   )
# 206 "Parser.fsy"
                 : 'registration));
# 659 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 207 "Parser.fsy"
                                               RegistrationTerm.Module(_2, posRange parseState 1, posRange parseState 2) 
                   )
# 207 "Parser.fsy"
                 : 'registration));
# 670 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'errorRegistration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 208 "Parser.fsy"
                                            _1 
                   )
# 208 "Parser.fsy"
                 : 'registration));
# 681 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 211 "Parser.fsy"
                                   _1 
                   )
# 211 "Parser.fsy"
                 : 'name));
# 692 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 212 "Parser.fsy"
                                   _1 
                   )
# 212 "Parser.fsy"
                 : 'name));
# 703 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 213 "Parser.fsy"
                                   
                                   let lexbuf = parseState.ParserLocalStore.["LexBuffer"] :?> LexBuffer<char>
                                   (posRange parseState 1, ErrMsg.IncompleteName (new string(lexbuf.Lexeme))) ||> reportRangeI
                                   _1
                                 
                   )
# 213 "Parser.fsy"
                 : 'name));
# 718 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'boolValue)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 220 "Parser.fsy"
                                              BoolFlag1Term.Flag(_3,  posRange parseState 1, startPos parseState 2, posRange parseState 3, posRangeOut parseState 1 3) 
                   )
# 220 "Parser.fsy"
                 : 'boolFlag1));
# 729 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'errorBoolFlag1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 221 "Parser.fsy"
                                              _1 
                   )
# 221 "Parser.fsy"
                 : 'boolFlag1));
# 740 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'boolValue)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 224 "Parser.fsy"
                                              BoolFlag2Term.Flag(_3,  posRange parseState 1, startPos parseState 2, posRange parseState 3, posRangeOut parseState 1 3) 
                   )
# 224 "Parser.fsy"
                 : 'boolFlag2));
# 751 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'errorBoolFlag2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 225 "Parser.fsy"
                                              _1 
                   )
# 225 "Parser.fsy"
                 : 'boolFlag2));
# 762 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 228 "Parser.fsy"
                                   true  
                   )
# 228 "Parser.fsy"
                 : 'boolValue));
# 772 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 229 "Parser.fsy"
                                   false 
                   )
# 229 "Parser.fsy"
                 : 'boolValue));
# 782 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 232 "Parser.fsy"
                                           
                                             (endPos parseState 2, ErrMsg.BoolMissing) ||> reportPointI
                                             BoolFlag1Term.Error(BoolFlagMissingPart.Value(endPos parseState 2, startPos parseState 1))
                                         
                   )
# 232 "Parser.fsy"
                 : 'errorBoolFlag1));
# 795 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 236 "Parser.fsy"
                                           
                                             let lexbuf   = parseState.ParserLocalStore.["LexBuffer"] :?> LexBuffer<char>
                                             let errToken = new string(lexbuf.Lexeme)
                                             let errPos   = posRange parseState 3
                                             (errPos, ErrMsg.UnexpectedToken errToken) ||> reportRangeI
                                             BoolFlag1Term.Error(BoolFlagMissingPart.IncompleteValue(errPos, errToken))
                                         
                   )
# 236 "Parser.fsy"
                 : 'errorBoolFlag1));
# 812 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'boolValue)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 243 "Parser.fsy"
                                           
                                            (endPos parseState 1, ErrMsg.EqMissing) ||> reportPointI
                                            BoolFlag1Term.Error(BoolFlagMissingPart.EqualBetween(posRangeIn parseState 1 2))
                                         
                   )
# 243 "Parser.fsy"
                 : 'errorBoolFlag1));
# 826 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 247 "Parser.fsy"
                                           
                                             (endPos parseState 1, ErrMsg.EqMissing) ||> reportPointI
                                             BoolFlag1Term.Error(BoolFlagMissingPart.EqualAfter(endPos parseState 1))
                                         
                   )
# 247 "Parser.fsy"
                 : 'errorBoolFlag1));
# 839 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'boolValue)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 251 "Parser.fsy"
                                          
                                            (startPos parseState 1, ErrMsg.BoolFlagTokenExpected) ||> reportPointI
                                            BoolFlag1Term.Error(BoolFlagMissingPart.BoolFlagTerm(startPos parseState 1)) 
                                         
                   )
# 251 "Parser.fsy"
                 : 'errorBoolFlag1));
# 853 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'boolValue)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 255 "Parser.fsy"
                                          
                                            (startPos parseState 1, ErrMsg.BoolFlagTokenExpected) ||> reportPointI
                                            BoolFlag1Term.Error(BoolFlagMissingPart.BoolFlagTerm(startPos parseState 1))
                                         
                   )
# 255 "Parser.fsy"
                 : 'errorBoolFlag1));
# 867 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 261 "Parser.fsy"
                                           
                                             (endPos parseState 2, ErrMsg.BoolMissing) ||> reportPointI
                                             BoolFlag2Term.Error(BoolFlagMissingPart.Value(endPos parseState 2, startPos parseState 1))
                                         
                   )
# 261 "Parser.fsy"
                 : 'errorBoolFlag2));
# 880 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 265 "Parser.fsy"
                                           
                                             let lexbuf   = parseState.ParserLocalStore.["LexBuffer"] :?> LexBuffer<char>
                                             let errToken = new string(lexbuf.Lexeme)
                                             let errPos   = posRange parseState 3
                                             (errPos, ErrMsg.UnexpectedToken errToken) ||> reportRangeI
                                             BoolFlag2Term.Error(BoolFlagMissingPart.IncompleteValue(errPos, errToken))
                                         
                   )
# 265 "Parser.fsy"
                 : 'errorBoolFlag2));
# 897 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'boolValue)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 272 "Parser.fsy"
                                             
                                             (endPos parseState 1, ErrMsg.EqMissing) ||> reportPointI
                                             BoolFlag2Term.Error(BoolFlagMissingPart.EqualBetween(posRangeIn parseState 1 2))
                                         
                   )
# 272 "Parser.fsy"
                 : 'errorBoolFlag2));
# 911 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 276 "Parser.fsy"
                                           
                                             (endPos parseState 1, ErrMsg.EqMissing) ||> reportPointI
                                             BoolFlag2Term.Error(BoolFlagMissingPart.EqualAfter(endPos parseState 1))
                                         
                   )
# 276 "Parser.fsy"
                 : 'errorBoolFlag2));
# 924 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'name)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 282 "Parser.fsy"
                                       
                                        (endPos parseState 1, ErrMsg.ArrowMissing) ||> reportPointI
                                        RegistrationTerm.ClassError(ClassRegMissingPart.ArrowAfter(endPos parseState 1)) 
                                      
                   )
# 282 "Parser.fsy"
                 : 'errorRegistration));
# 938 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'name)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'name)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 286 "Parser.fsy"
                                     
                                        (endPos parseState 1, ErrMsg.ArrowMissing) ||> reportPointI
                                        RegistrationTerm.ClassError(ClassRegMissingPart.ArrowBetween(posRangeIn parseState 1 2)) 
                                      
                   )
# 286 "Parser.fsy"
                 : 'errorRegistration));
# 953 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'name)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 290 "Parser.fsy"
                                     
                                        (endPos parseState 2, ErrMsg.FqnMissing) ||> reportPointI
                                        RegistrationTerm.ClassError(ClassRegMissingPart.ImplName(endPos parseState 2))
                                      
                   )
# 290 "Parser.fsy"
                 : 'errorRegistration));
# 967 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'name)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 294 "Parser.fsy"
                                        
                                        (endPos parseState 1, ErrMsg.FqnMissing) ||> reportPointI
                                        RegistrationTerm.ClassError(ClassRegMissingPart.DepName(posRangeOut parseState 1 2))
                                      
                   )
# 294 "Parser.fsy"
                 : 'errorRegistration));
# 981 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 298 "Parser.fsy"
                                       
                                        (startPos parseState 1, ErrMsg.OrphanArrow) ||> reportPointI
                                        RegistrationTerm.ClassError(ClassRegMissingPart.OrphanArrow(posRange parseState 1))
                                      
                   )
# 298 "Parser.fsy"
                 : 'errorRegistration));
# 994 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 302 "Parser.fsy"
                                     
                                        (endPos parseState 1, ErrMsg.FqnMissing) ||> reportPointI
                                        RegistrationTerm.ModuleError(ModuleRegMissingPart.Name(endPos parseState 1))
                                      
                   )
# 302 "Parser.fsy"
                 : 'errorRegistration));
# 1007 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'errorExprBody)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 308 "Parser.fsy"
                                                   _2::_1 
                   )
# 308 "Parser.fsy"
                 : 'errorExprBody));
# 1019 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 309 "Parser.fsy"
                                                   [ _1 ] 
                   )
# 309 "Parser.fsy"
                 : 'errorExprBody));
# 1030 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 312 "Parser.fsy"
                                   
                                     let lexbuf   = parseState.ParserLocalStore.["LexBuffer"] :?> LexBuffer<char>
                                     let posRange = (lexbuf.StartPos, lexbuf.EndPos)
                                     let errToken = new string(lexbuf.Lexeme)
                                     (posRange, ErrMsg.UnexpectedToken errToken) ||>reportRangeI
                                     (posRange, errToken)
                                 
                   )
# 312 "Parser.fsy"
                 : 'errToken));
# 1047 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 322 "Parser.fsy"
                              
                                 let lexbuf   = parseState.ParserLocalStore.["LexBuffer"] :?> LexBuffer<char>
                                 let posRange = (lexbuf.StartPos, lexbuf.EndPos)
                                 let errToken = new string(lexbuf.Lexeme)
                                 (posRange, ErrMsg.UnexpectedToken errToken) ||>reportRangeI
                                 (posRange, errToken)
                             
                   )
# 322 "Parser.fsy"
                 : 'recover));
# 1063 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 331 "Parser.fsy"
                                          posRangeAndToken parseState 
                   )
# 331 "Parser.fsy"
                 : 'any));
# 1073 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 332 "Parser.fsy"
                                          posRangeAndToken parseState 
                   )
# 332 "Parser.fsy"
                 : 'any));
# 1083 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 333 "Parser.fsy"
                                          posRangeAndToken parseState 
                   )
# 333 "Parser.fsy"
                 : 'any));
# 1093 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 334 "Parser.fsy"
                                          posRangeAndToken parseState 
                   )
# 334 "Parser.fsy"
                 : 'any));
# 1103 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 335 "Parser.fsy"
                                          posRangeAndToken parseState 
                   )
# 335 "Parser.fsy"
                 : 'any));
# 1113 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 336 "Parser.fsy"
                                          posRangeAndToken parseState 
                   )
# 336 "Parser.fsy"
                 : 'any));
# 1123 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 337 "Parser.fsy"
                                          posRangeAndToken parseState 
                   )
# 337 "Parser.fsy"
                 : 'any));
# 1133 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 338 "Parser.fsy"
                                          posRangeAndToken parseState 
                   )
# 338 "Parser.fsy"
                 : 'any));
# 1143 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 339 "Parser.fsy"
                                          posRangeAndToken parseState 
                   )
# 339 "Parser.fsy"
                 : 'any));
# 1153 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 340 "Parser.fsy"
                                          posRangeAndToken parseState 
                   )
# 340 "Parser.fsy"
                 : 'any));
# 1164 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 341 "Parser.fsy"
                                          posRangeAndToken parseState 
                   )
# 341 "Parser.fsy"
                 : 'any));
# 1175 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 342 "Parser.fsy"
                                          posRangeAndToken parseState 
                   )
# 342 "Parser.fsy"
                 : 'any));
|]
# 1187 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 17;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let parseDrt lexer lexbuf : TestCompilationUnit =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
