// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open System
open DslAst
open TextUtilities
open Common
open Compilation
open System.Collections.Generic
open Extensions
open Errors

let errorLogger = ErrorLogger()

let index = SortedSet<PositionIndex>(PositionComparer.Instance)

let addIdx idx = index.Add(idx)

let separate lexems = 
    let rec separateRec (boolFlags1: BoolFlag1 list) (boolFlags2: BoolFlag2 list) (registrations:  Registration list) = function
        | (BoolFlag1(BoolFlag1.Flag(_) as b))::t -> 
            (b::boolFlags1, boolFlags2, registrations, t)  ||||> separateRec 
        | (BoolFlag2(BoolFlag2.Flag(_) as b))::t -> 
            (boolFlags1, b::boolFlags2, registrations, t)  ||||> separateRec
        | Registration(r)::t           -> 
            (boolFlags1, boolFlags2, List.append registrations r, t) ||||> separateRec
        | any::t -> (boolFlags1, boolFlags2, registrations, t) ||||> separateRec
        | []     -> (boolFlags1 |> List.rev, boolFlags2 |> List.rev, registrations)

    separateRec [] [] [] lexems

# 36 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | SNAME of (string)
  | FQN of (string)
  | DEPENDENCIES
  | MODULE
  | QUOT
  | FALSE
  | TRUE
  | BF2
  | BF1
  | EQ
  | ARROW
  | ERROR
  | TESTHEADER
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_SNAME
    | TOKEN_FQN
    | TOKEN_DEPENDENCIES
    | TOKEN_MODULE
    | TOKEN_QUOT
    | TOKEN_FALSE
    | TOKEN_TRUE
    | TOKEN_BF2
    | TOKEN_BF1
    | TOKEN_EQ
    | TOKEN_ARROW
    | TOKEN_ERROR
    | TOKEN_TESTHEADER
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_testBody
    | NONTERM_testHeader
    | NONTERM_expressionSet
    | NONTERM_bodyExpression
    | NONTERM_registration
    | NONTERM_registrationSet
    | NONTERM_boolFlag1
    | NONTERM_boolFlag2
    | NONTERM_errorBoolFlag1
    | NONTERM_errorBoolFlag2
    | NONTERM_errorRegistration

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | SNAME _ -> 1 
  | FQN _ -> 2 
  | DEPENDENCIES  -> 3 
  | MODULE  -> 4 
  | QUOT  -> 5 
  | FALSE  -> 6 
  | TRUE  -> 7 
  | BF2  -> 8 
  | BF1  -> 9 
  | EQ  -> 10 
  | ARROW  -> 11 
  | ERROR  -> 12 
  | TESTHEADER  -> 13 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_SNAME 
  | 2 -> TOKEN_FQN 
  | 3 -> TOKEN_DEPENDENCIES 
  | 4 -> TOKEN_MODULE 
  | 5 -> TOKEN_QUOT 
  | 6 -> TOKEN_FALSE 
  | 7 -> TOKEN_TRUE 
  | 8 -> TOKEN_BF2 
  | 9 -> TOKEN_BF1 
  | 10 -> TOKEN_EQ 
  | 11 -> TOKEN_ARROW 
  | 12 -> TOKEN_ERROR 
  | 13 -> TOKEN_TESTHEADER 
  | 16 -> TOKEN_end_of_input
  | 14 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_testBody 
    | 3 -> NONTERM_testHeader 
    | 4 -> NONTERM_testHeader 
    | 5 -> NONTERM_expressionSet 
    | 6 -> NONTERM_expressionSet 
    | 7 -> NONTERM_bodyExpression 
    | 8 -> NONTERM_bodyExpression 
    | 9 -> NONTERM_bodyExpression 
    | 10 -> NONTERM_registration 
    | 11 -> NONTERM_registration 
    | 12 -> NONTERM_registration 
    | 13 -> NONTERM_registrationSet 
    | 14 -> NONTERM_registrationSet 
    | 15 -> NONTERM_boolFlag1 
    | 16 -> NONTERM_boolFlag1 
    | 17 -> NONTERM_boolFlag1 
    | 18 -> NONTERM_boolFlag2 
    | 19 -> NONTERM_boolFlag2 
    | 20 -> NONTERM_boolFlag2 
    | 21 -> NONTERM_errorBoolFlag1 
    | 22 -> NONTERM_errorBoolFlag1 
    | 23 -> NONTERM_errorBoolFlag1 
    | 24 -> NONTERM_errorBoolFlag1 
    | 25 -> NONTERM_errorBoolFlag2 
    | 26 -> NONTERM_errorBoolFlag2 
    | 27 -> NONTERM_errorBoolFlag2 
    | 28 -> NONTERM_errorBoolFlag2 
    | 29 -> NONTERM_errorRegistration 
    | 30 -> NONTERM_errorRegistration 
    | 31 -> NONTERM_errorRegistration 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 16 
let _fsyacc_tagOfErrorTerminal = 14

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | SNAME _ -> "SNAME" 
  | FQN _ -> "FQN" 
  | DEPENDENCIES  -> "DEPENDENCIES" 
  | MODULE  -> "MODULE" 
  | QUOT  -> "QUOT" 
  | FALSE  -> "FALSE" 
  | TRUE  -> "TRUE" 
  | BF2  -> "BF2" 
  | BF1  -> "BF1" 
  | EQ  -> "EQ" 
  | ARROW  -> "ARROW" 
  | ERROR  -> "ERROR" 
  | TESTHEADER  -> "TESTHEADER" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | SNAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FQN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DEPENDENCIES  -> (null : System.Object) 
  | MODULE  -> (null : System.Object) 
  | QUOT  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | BF2  -> (null : System.Object) 
  | BF1  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
  | ERROR  -> (null : System.Object) 
  | TESTHEADER  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 1us; 65535us; 0us; 4us; 1us; 65535us; 4us; 5us; 2us; 65535us; 4us; 9us; 5us; 8us; 3us; 65535us; 4us; 19us; 5us; 19us; 12us; 20us; 2us; 65535us; 4us; 12us; 5us; 12us; 2us; 65535us; 4us; 10us; 5us; 10us; 2us; 65535us; 4us; 11us; 5us; 11us; 2us; 65535us; 4us; 25us; 5us; 25us; 2us; 65535us; 4us; 30us; 5us; 30us; 3us; 65535us; 4us; 18us; 5us; 18us; 12us; 18us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 7us; 9us; 12us; 16us; 19us; 22us; 25us; 28us; 31us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 2us; 5us; 2us; 3us; 4us; 1us; 3us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 2us; 9us; 14us; 3us; 10us; 29us; 30us; 2us; 10us; 30us; 1us; 10us; 2us; 11us; 31us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; 6us; 15us; 16us; 21us; 22us; 23us; 24us; 3us; 15us; 16us; 22us; 1us; 15us; 1us; 16us; 1us; 17us; 6us; 18us; 19us; 25us; 26us; 27us; 28us; 3us; 18us; 19us; 26us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 23us; 1us; 24us; 1us; 27us; 1us; 28us; 1us; 29us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 13us; 16us; 18us; 20us; 22us; 24us; 26us; 29us; 33us; 36us; 38us; 41us; 43us; 45us; 47us; 49us; 56us; 60us; 62us; 64us; 66us; 73us; 77us; 79us; 81us; 83us; 85us; 87us; 89us; 91us; |]
let _fsyacc_action_rows = 36
let _fsyacc_actionTableElements = [|1us; 32768us; 13us; 6us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 4us; 32768us; 2us; 13us; 4us; 16us; 8us; 26us; 9us; 21us; 4us; 16386us; 2us; 13us; 4us; 16us; 8us; 26us; 9us; 21us; 1us; 16388us; 1us; 7us; 0us; 16387us; 0us; 16389us; 0us; 16390us; 0us; 16391us; 0us; 16392us; 2us; 16393us; 2us; 13us; 4us; 16us; 2us; 32768us; 2us; 35us; 11us; 14us; 1us; 16414us; 2us; 15us; 0us; 16394us; 1us; 16415us; 2us; 17us; 0us; 16395us; 0us; 16396us; 0us; 16397us; 0us; 16398us; 3us; 16405us; 6us; 32us; 7us; 31us; 10us; 22us; 2us; 16406us; 6us; 24us; 7us; 23us; 0us; 16399us; 0us; 16400us; 0us; 16401us; 3us; 16409us; 6us; 34us; 7us; 33us; 10us; 27us; 2us; 16410us; 6us; 29us; 7us; 28us; 0us; 16402us; 0us; 16403us; 0us; 16404us; 0us; 16407us; 0us; 16408us; 0us; 16411us; 0us; 16412us; 0us; 16413us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 5us; 6us; 11us; 16us; 18us; 19us; 20us; 21us; 22us; 23us; 26us; 29us; 31us; 32us; 34us; 35us; 36us; 37us; 38us; 42us; 45us; 46us; 47us; 48us; 52us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 2us; 2us; 1us; 2us; 1us; 1us; 1us; 1us; 3us; 2us; 1us; 1us; 2us; 3us; 3us; 1us; 3us; 3us; 1us; 1us; 2us; 2us; 2us; 1us; 2us; 2us; 2us; 2us; 2us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 4us; 4us; 5us; 5us; 5us; 6us; 6us; 6us; 7us; 7us; 8us; 8us; 8us; 9us; 9us; 9us; 10us; 10us; 10us; 10us; 11us; 11us; 11us; 11us; 12us; 12us; 12us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 16387us; 16389us; 16390us; 16391us; 16392us; 65535us; 65535us; 65535us; 16394us; 65535us; 16395us; 16396us; 16397us; 16398us; 65535us; 65535us; 16399us; 16400us; 16401us; 65535us; 65535us; 16402us; 16403us; 16404us; 16407us; 16408us; 16411us; 16412us; 16413us; |]
let _fsyacc_reductions ()  =    [| 
# 212 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : DslAst.DependencyTest)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 221 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'testBody)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsy"
                                          _1 
                   )
# 52 "Parser.fsy"
                 : DslAst.DependencyTest));
# 232 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'testHeader)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expressionSet)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                              
                                 PositionIndex(posRange parseState 1, _1 |> TestDeclarationTerm) |> addIdx |> ignore
                                 let boolFlags1, boolFlags2, registrations = separate _2
                                 Test(_1, boolFlags1, boolFlags2, registrations, posRangeExt parseState 1 2)
                             
                   )
# 56 "Parser.fsy"
                 : 'testBody));
# 248 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                              TestDeclaration.Full(_2, posRange parseState 1, posRange parseState 2) 
                   )
# 63 "Parser.fsy"
                 : 'testHeader));
# 259 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                               
                                 (endPos parseState 1, ErrMsg.TestNameIsNotDefined, errorLogger) |||> reportPoint
                                 TestDeclaration.Partial(posRange parseState 1)
                             
                   )
# 65 "Parser.fsy"
                 : 'testHeader));
# 272 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expressionSet)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'bodyExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                                          _2::_1 |> List.rev 
                   )
# 71 "Parser.fsy"
                 : 'expressionSet));
# 284 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bodyExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsy"
                                            [_1] 
                   )
# 72 "Parser.fsy"
                 : 'expressionSet));
# 295 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'boolFlag1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Parser.fsy"
                                       
                                         PositionIndex(posRange parseState 1, _1 |> BoolFlag1Term) |> addIdx |> ignore
                                         BoolFlag1(_1)
                                     
                   )
# 76 "Parser.fsy"
                 : 'bodyExpression));
# 309 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'boolFlag2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                                       
                                         PositionIndex(posRange parseState 1, _1 |> BoolFlag2Term) |> addIdx |> ignore
                                         BoolFlag2(_1)
                                     
                   )
# 81 "Parser.fsy"
                 : 'bodyExpression));
# 323 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'registrationSet)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "Parser.fsy"
                                             Registration(_1 |> List.rev) 
                   )
# 85 "Parser.fsy"
                 : 'bodyExpression));
# 334 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "Parser.fsy"
                                               Class(_1, _3, posRange parseState 1, posRange parseState 2, posRange parseState 3) 
                   )
# 88 "Parser.fsy"
                 : 'registration));
# 346 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "Parser.fsy"
                                               Module(_2, posRange parseState 1, posRange parseState 2) 
                   )
# 89 "Parser.fsy"
                 : 'registration));
# 357 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'errorRegistration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "Parser.fsy"
                                            _1 
                   )
# 90 "Parser.fsy"
                 : 'registration));
# 368 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'registration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsy"
                                         
                                            PositionIndex(posRange parseState 1, _1 |> RegistrationTerm) |> addIdx |> ignore
                                            [_1]
                                        
                   )
# 93 "Parser.fsy"
                 : 'registrationSet));
# 382 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'registrationSet)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'registration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsy"
                                          
                                            PositionIndex(posRange parseState 2, _2 |> RegistrationTerm) |> addIdx |> ignore
                                            _2::_1 
                                        
                   )
# 98 "Parser.fsy"
                 : 'registrationSet));
# 397 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsy"
                                            BoolFlag1.Flag(true,  posRange parseState 1, startPos parseState 2, posRange parseState 3) 
                   )
# 104 "Parser.fsy"
                 : 'boolFlag1));
# 407 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "Parser.fsy"
                                            BoolFlag1.Flag(false, posRange parseState 1, startPos parseState 2, posRange parseState 3) 
                   )
# 105 "Parser.fsy"
                 : 'boolFlag1));
# 417 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'errorBoolFlag1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "Parser.fsy"
                                            _1 
                   )
# 106 "Parser.fsy"
                 : 'boolFlag1));
# 428 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Parser.fsy"
                                            BoolFlag2.Flag(true,  posRange parseState 1, startPos parseState 2, posRange parseState 3) 
                   )
# 109 "Parser.fsy"
                 : 'boolFlag2));
# 438 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "Parser.fsy"
                                            BoolFlag2.Flag(false, posRange parseState 1, startPos parseState 2, posRange parseState 3) 
                   )
# 110 "Parser.fsy"
                 : 'boolFlag2));
# 448 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'errorBoolFlag2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "Parser.fsy"
                                            _1 
                   )
# 111 "Parser.fsy"
                 : 'boolFlag2));
# 459 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "Parser.fsy"
                                       
                                         (endPos parseState 1, ErrMsg.EqMissing, errorLogger) |||> reportPoint
                                         BoolFlag1.Error(BoolFlagMissingPart.Equal, endPos parseState 1) 
                                     
                   )
# 114 "Parser.fsy"
                 : 'errorBoolFlag1));
# 472 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "Parser.fsy"
                                       
                                         (endPos parseState 2, ErrMsg.BoolMissing, errorLogger) |||> reportPoint
                                         BoolFlag1.Error(BoolFlagMissingPart.Value, endPos parseState 2) 
                                     
                   )
# 118 "Parser.fsy"
                 : 'errorBoolFlag1));
# 485 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "Parser.fsy"
                                       
                                         (endPos parseState 1, ErrMsg.EqMissing, errorLogger) |||> reportPoint
                                         BoolFlag1.Error(BoolFlagMissingPart.Equal, endPos parseState 1) 
                                     
                   )
# 122 "Parser.fsy"
                 : 'errorBoolFlag1));
# 498 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "Parser.fsy"
                                       
                                         (endPos parseState 1, ErrMsg.EqMissing, errorLogger) |||> reportPoint
                                         BoolFlag1.Error(BoolFlagMissingPart.Equal, endPos parseState 1) 
                                     
                   )
# 126 "Parser.fsy"
                 : 'errorBoolFlag1));
# 511 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "Parser.fsy"
                                       
                                         (endPos parseState 1, ErrMsg.EqMissing, errorLogger) |||> reportPoint
                                         BoolFlag2.Error(BoolFlagMissingPart.Equal, endPos parseState 1) 
                                     
                   )
# 132 "Parser.fsy"
                 : 'errorBoolFlag2));
# 524 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "Parser.fsy"
                                       
                                         (endPos parseState 2, ErrMsg.BoolMissing, errorLogger) |||> reportPoint
                                         BoolFlag2.Error(BoolFlagMissingPart.Value, endPos parseState 1) 
                                     
                   )
# 136 "Parser.fsy"
                 : 'errorBoolFlag2));
# 537 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "Parser.fsy"
                                    
                                         (endPos parseState 1, ErrMsg.EqMissing, errorLogger) |||> reportPoint
                                         BoolFlag2.Error(BoolFlagMissingPart.Equal, endPos parseState 1) 
                                     
                   )
# 140 "Parser.fsy"
                 : 'errorBoolFlag2));
# 550 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "Parser.fsy"
                                       
                                         (endPos parseState 1, ErrMsg.EqMissing, errorLogger) |||> reportPoint
                                         BoolFlag2.Error(BoolFlagMissingPart.Equal, endPos parseState 1) 
                                     
                   )
# 144 "Parser.fsy"
                 : 'errorBoolFlag2));
# 563 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "Parser.fsy"
                                    
                                         (endPos parseState 1, ErrMsg.ArrowMissing, errorLogger) |||> reportPoint
                                         ClassError(ClassRegMissingPart.Arrow, endPos parseState 1) 
                                     
                   )
# 150 "Parser.fsy"
                 : 'errorRegistration));
# 578 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "Parser.fsy"
                                    
                                         (endPos parseState 2, ErrMsg.FqnMissing, errorLogger) |||> reportPoint
                                         ClassError(ClassRegMissingPart.Name, endPos parseState 2) 
                                     
                   )
# 154 "Parser.fsy"
                 : 'errorRegistration));
# 592 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "Parser.fsy"
                                    
                                         (endPos parseState 1, ErrMsg.FqnMissing, errorLogger) |||> reportPoint
                                         ModuleError(ModuleRegMissingPart.Name, endPos parseState 1) 
                                     
                   )
# 158 "Parser.fsy"
                 : 'errorRegistration));
|]
# 606 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 17;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : DslAst.DependencyTest =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
