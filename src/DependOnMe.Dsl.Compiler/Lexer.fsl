{
module Lexer

open Parser
open Microsoft.FSharp.Text.Lexing
open TextUtilities

let lexeme = LexBuffer<_>.LexemeString

}

let testHeader = "DependencyTest"
let space = " "
let tab = "\t"
let arrow = "->"
let quot = "\""
let module = "Module"
let dependencies = "dependencies"
let dot = "."
let true = "True"
let false = "False"
let equals = "="
let char = ['a'-'z' 'A'-'Z']
let digit = ['0'-'9']
let num = digit+
let underscore = "_"
let fullyQualifiedName = char((char|num)+ dot char(char|num)*)
let name = char(char|num|underscore)*
let boolFlag1 = "BoolFlag1"
let boolFlag2 = "BoolFlag2"
let ignore = [' ' '\t' ]
let newLine = '\n' | '\r' '\n'


rule lex = parse
  | ignore { lex lexbuf }
  | newLine { newLine lexbuf; lex lexbuf }
  | testHeader { TESTHEADER }
  | tab { ERROR }  
  | arrow { ARROW }
  | equals { EQ }
  | boolFlag1 { BF1 }
  | boolFlag2 { BF2 }
  | true { TRUE }
  | false { FALSE }
  | quot { QUOT }
  | module { MODULE }
  | dependencies { DEPENDENCIES }
  | fullyQualifiedName { FQN(lexeme lexbuf) }
  | name { SNAME(lexeme lexbuf) }
  | eof { EOF }
