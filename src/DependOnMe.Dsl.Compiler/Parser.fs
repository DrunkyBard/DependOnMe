// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open System
open DslAst
open TextUtilities
open Common
open Compilation
open System.Collections.Generic
open Errors
open Positioning
open DataStructures
open Navigation

let mutable errorLogger = Unchecked.defaultof<ErrorLogger>

let reportRangeI posRange msg = reportRange posRange msg errorLogger

let reportPointI pos msg = reportPoint pos msg errorLogger

let index = RedBlackTree<PosRange, IndexTerm>(PosRangeComparer.Instance)
let testIndex = PositionSet()

let addIdx posRange term = index.Insert(posRange, term)
let addTestIdx posRange term = testIndex.Insert(PositionIndex(posRange, term))

let separate lexems = 
    let rec separateRec (boolFlags1: BoolFlag1 list) (boolFlags2: BoolFlag2 list) (registrations:  Registration list) = function
        | (BoolFlag1(BoolFlag1.Flag(_) as b))::t -> 
            (b::boolFlags1, boolFlags2, registrations, t)  ||||> separateRec 
        | (BoolFlag2(BoolFlag2.Flag(_) as b))::t -> 
            (boolFlags1, b::boolFlags2, registrations, t)  ||||> separateRec
        | Registration(r)::t           -> 
            (boolFlags1, boolFlags2, List.append registrations r, t) ||||> separateRec
        | any::t -> (boolFlags1, boolFlags2, registrations, t) ||||> separateRec
        | []     -> (boolFlags1 |> List.rev, boolFlags2 |> List.rev, registrations)

    separateRec [] [] [] lexems

let useValidUsings usings =
    let rec useValid usings acc = 
        match usings with 
            | Using.Fqn(s, _)::t -> (t, s::acc) ||> useValid
            | Using.Iqn(_)::t 
            | Using.Orphan(_)::t -> (t, acc) ||> useValid
            | [] -> acc
    useValid usings []

# 53 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | USING
  | SNAME of (string)
  | IQN of (string)
  | FQN of (string)
  | DEPENDENCIES
  | MODULE
  | QUOT
  | FALSE
  | TRUE
  | BF2
  | BF1
  | EQ
  | ARROW
  | TESTHEADER
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_USING
    | TOKEN_SNAME
    | TOKEN_IQN
    | TOKEN_FQN
    | TOKEN_DEPENDENCIES
    | TOKEN_MODULE
    | TOKEN_QUOT
    | TOKEN_FALSE
    | TOKEN_TRUE
    | TOKEN_BF2
    | TOKEN_BF1
    | TOKEN_EQ
    | TOKEN_ARROW
    | TOKEN_TESTHEADER
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_testHeader
    | NONTERM_usings
    | NONTERM_using
    | NONTERM_compilationUnit
    | NONTERM_tests
    | NONTERM_testBody
    | NONTERM_expressionSet
    | NONTERM_bodyExpression
    | NONTERM_registrationSet
    | NONTERM_registration
    | NONTERM_name
    | NONTERM_boolFlag1
    | NONTERM_boolFlag2
    | NONTERM_boolValue
    | NONTERM_errorBoolFlag1
    | NONTERM_errorBoolFlag2
    | NONTERM_errorRegistration
    | NONTERM_errorExprBody
    | NONTERM_errToken
    | NONTERM_recover
    | NONTERM_any

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | USING  -> 1 
  | SNAME _ -> 2 
  | IQN _ -> 3 
  | FQN _ -> 4 
  | DEPENDENCIES  -> 5 
  | MODULE  -> 6 
  | QUOT  -> 7 
  | FALSE  -> 8 
  | TRUE  -> 9 
  | BF2  -> 10 
  | BF1  -> 11 
  | EQ  -> 12 
  | ARROW  -> 13 
  | TESTHEADER  -> 14 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_USING 
  | 2 -> TOKEN_SNAME 
  | 3 -> TOKEN_IQN 
  | 4 -> TOKEN_FQN 
  | 5 -> TOKEN_DEPENDENCIES 
  | 6 -> TOKEN_MODULE 
  | 7 -> TOKEN_QUOT 
  | 8 -> TOKEN_FALSE 
  | 9 -> TOKEN_TRUE 
  | 10 -> TOKEN_BF2 
  | 11 -> TOKEN_BF1 
  | 12 -> TOKEN_EQ 
  | 13 -> TOKEN_ARROW 
  | 14 -> TOKEN_TESTHEADER 
  | 17 -> TOKEN_end_of_input
  | 15 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_start 
    | 3 -> NONTERM_testHeader 
    | 4 -> NONTERM_testHeader 
    | 5 -> NONTERM_testHeader 
    | 6 -> NONTERM_usings 
    | 7 -> NONTERM_usings 
    | 8 -> NONTERM_using 
    | 9 -> NONTERM_using 
    | 10 -> NONTERM_using 
    | 11 -> NONTERM_using 
    | 12 -> NONTERM_compilationUnit 
    | 13 -> NONTERM_compilationUnit 
    | 14 -> NONTERM_tests 
    | 15 -> NONTERM_tests 
    | 16 -> NONTERM_testBody 
    | 17 -> NONTERM_expressionSet 
    | 18 -> NONTERM_expressionSet 
    | 19 -> NONTERM_bodyExpression 
    | 20 -> NONTERM_bodyExpression 
    | 21 -> NONTERM_bodyExpression 
    | 22 -> NONTERM_bodyExpression 
    | 23 -> NONTERM_registrationSet 
    | 24 -> NONTERM_registrationSet 
    | 25 -> NONTERM_registration 
    | 26 -> NONTERM_registration 
    | 27 -> NONTERM_registration 
    | 28 -> NONTERM_name 
    | 29 -> NONTERM_name 
    | 30 -> NONTERM_name 
    | 31 -> NONTERM_boolFlag1 
    | 32 -> NONTERM_boolFlag1 
    | 33 -> NONTERM_boolFlag2 
    | 34 -> NONTERM_boolFlag2 
    | 35 -> NONTERM_boolValue 
    | 36 -> NONTERM_boolValue 
    | 37 -> NONTERM_errorBoolFlag1 
    | 38 -> NONTERM_errorBoolFlag1 
    | 39 -> NONTERM_errorBoolFlag1 
    | 40 -> NONTERM_errorBoolFlag1 
    | 41 -> NONTERM_errorBoolFlag1 
    | 42 -> NONTERM_errorBoolFlag1 
    | 43 -> NONTERM_errorBoolFlag2 
    | 44 -> NONTERM_errorBoolFlag2 
    | 45 -> NONTERM_errorBoolFlag2 
    | 46 -> NONTERM_errorBoolFlag2 
    | 47 -> NONTERM_errorRegistration 
    | 48 -> NONTERM_errorRegistration 
    | 49 -> NONTERM_errorRegistration 
    | 50 -> NONTERM_errorRegistration 
    | 51 -> NONTERM_errorRegistration 
    | 52 -> NONTERM_errorRegistration 
    | 53 -> NONTERM_errorExprBody 
    | 54 -> NONTERM_errorExprBody 
    | 55 -> NONTERM_errToken 
    | 56 -> NONTERM_recover 
    | 57 -> NONTERM_any 
    | 58 -> NONTERM_any 
    | 59 -> NONTERM_any 
    | 60 -> NONTERM_any 
    | 61 -> NONTERM_any 
    | 62 -> NONTERM_any 
    | 63 -> NONTERM_any 
    | 64 -> NONTERM_any 
    | 65 -> NONTERM_any 
    | 66 -> NONTERM_any 
    | 67 -> NONTERM_any 
    | 68 -> NONTERM_any 
    | 69 -> NONTERM_any 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 17 
let _fsyacc_tagOfErrorTerminal = 15

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | USING  -> "USING" 
  | SNAME _ -> "SNAME" 
  | IQN _ -> "IQN" 
  | FQN _ -> "FQN" 
  | DEPENDENCIES  -> "DEPENDENCIES" 
  | MODULE  -> "MODULE" 
  | QUOT  -> "QUOT" 
  | FALSE  -> "FALSE" 
  | TRUE  -> "TRUE" 
  | BF2  -> "BF2" 
  | BF1  -> "BF1" 
  | EQ  -> "EQ" 
  | ARROW  -> "ARROW" 
  | TESTHEADER  -> "TESTHEADER" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | USING  -> (null : System.Object) 
  | SNAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IQN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FQN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DEPENDENCIES  -> (null : System.Object) 
  | MODULE  -> (null : System.Object) 
  | QUOT  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | BF2  -> (null : System.Object) 
  | BF1  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
  | TESTHEADER  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 3us; 65535us; 0us; 19us; 14us; 19us; 17us; 19us; 2us; 65535us; 0us; 14us; 8us; 9us; 2us; 65535us; 0us; 8us; 8us; 8us; 1us; 65535us; 0us; 2us; 3us; 65535us; 0us; 16us; 14us; 15us; 17us; 18us; 3us; 65535us; 0us; 17us; 14us; 17us; 17us; 17us; 1us; 65535us; 19us; 20us; 2us; 65535us; 19us; 22us; 20us; 21us; 2us; 65535us; 19us; 25us; 20us; 25us; 3us; 65535us; 19us; 27us; 20us; 27us; 25us; 28us; 6us; 65535us; 19us; 29us; 20us; 29us; 25us; 29us; 29us; 55us; 30us; 31us; 56us; 57us; 2us; 65535us; 19us; 23us; 20us; 23us; 2us; 65535us; 19us; 24us; 20us; 24us; 7us; 65535us; 19us; 52us; 20us; 52us; 38us; 49us; 39us; 40us; 42us; 54us; 43us; 44us; 50us; 51us; 2us; 65535us; 19us; 41us; 20us; 41us; 2us; 65535us; 19us; 45us; 20us; 45us; 3us; 65535us; 19us; 34us; 20us; 34us; 25us; 34us; 2us; 65535us; 19us; 26us; 20us; 26us; 0us; 65535us; 3us; 65535us; 19us; 59us; 20us; 59us; 26us; 58us; 3us; 65535us; 0us; 7us; 14us; 7us; 17us; 7us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 7us; 10us; 13us; 15us; 19us; 23us; 25us; 28us; 31us; 35us; 42us; 45us; 48us; 56us; 59us; 62us; 66us; 69us; 70us; 74us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 2us; 3us; 3us; 4us; 57us; 1us; 3us; 1us; 5us; 2us; 6us; 7us; 1us; 6us; 4us; 8us; 9us; 10us; 11us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 12us; 1us; 12us; 1us; 13us; 2us; 14us; 15us; 1us; 14us; 1us; 16us; 2us; 16us; 17us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 2us; 21us; 24us; 2us; 22us; 53us; 1us; 23us; 1us; 24us; 4us; 25us; 47us; 48us; 49us; 2us; 25us; 49us; 1us; 25us; 2us; 26us; 52us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 30us; 5us; 31us; 37us; 38us; 39us; 40us; 3us; 31us; 37us; 38us; 1us; 31us; 1us; 32us; 5us; 33us; 43us; 44us; 45us; 46us; 3us; 33us; 43us; 44us; 1us; 33us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 38us; 1us; 39us; 1us; 41us; 1us; 41us; 1us; 42us; 1us; 44us; 1us; 45us; 1us; 48us; 2us; 50us; 51us; 1us; 50us; 1us; 53us; 1us; 54us; 1us; 56us; 1us; 58us; 1us; 59us; 1us; 60us; 1us; 61us; 1us; 62us; 1us; 63us; 1us; 64us; 1us; 65us; 1us; 66us; 1us; 67us; 1us; 68us; 1us; 69us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 14us; 16us; 18us; 21us; 23us; 28us; 30us; 32us; 34us; 36us; 38us; 40us; 43us; 45us; 47us; 50us; 52us; 54us; 56us; 58us; 61us; 64us; 66us; 68us; 73us; 76us; 78us; 81us; 83us; 85us; 87us; 89us; 91us; 97us; 101us; 103us; 105us; 111us; 115us; 117us; 119us; 121us; 123us; 125us; 127us; 129us; 131us; 133us; 135us; 137us; 139us; 142us; 144us; 146us; 148us; 150us; 152us; 154us; 156us; 158us; 160us; 162us; 164us; 166us; 168us; 170us; 172us; |]
let _fsyacc_action_rows = 73
let _fsyacc_actionTableElements = [|15us; 32768us; 0us; 4us; 1us; 10us; 2us; 72us; 3us; 71us; 4us; 70us; 5us; 69us; 6us; 68us; 7us; 67us; 8us; 66us; 9us; 65us; 10us; 64us; 11us; 63us; 12us; 62us; 13us; 61us; 14us; 5us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 0us; 16386us; 1us; 16388us; 2us; 6us; 0us; 16387us; 0us; 16389us; 1us; 16391us; 1us; 10us; 0us; 16390us; 3us; 16395us; 2us; 11us; 3us; 12us; 4us; 13us; 0us; 16392us; 0us; 16393us; 0us; 16394us; 13us; 32768us; 2us; 72us; 3us; 71us; 4us; 70us; 5us; 69us; 6us; 68us; 7us; 67us; 8us; 66us; 9us; 65us; 10us; 64us; 11us; 63us; 12us; 62us; 13us; 61us; 14us; 5us; 0us; 16396us; 0us; 16397us; 13us; 16399us; 2us; 72us; 3us; 71us; 4us; 70us; 5us; 69us; 6us; 68us; 7us; 67us; 8us; 66us; 9us; 65us; 10us; 64us; 11us; 63us; 12us; 62us; 13us; 61us; 14us; 5us; 0us; 16398us; 11us; 32768us; 2us; 35us; 3us; 37us; 4us; 36us; 6us; 32us; 8us; 47us; 9us; 46us; 10us; 42us; 11us; 38us; 12us; 50us; 13us; 56us; 15us; 60us; 11us; 16400us; 2us; 35us; 3us; 37us; 4us; 36us; 6us; 32us; 8us; 47us; 9us; 46us; 10us; 42us; 11us; 38us; 12us; 50us; 13us; 56us; 15us; 60us; 0us; 16401us; 0us; 16402us; 0us; 16403us; 0us; 16404us; 5us; 16405us; 2us; 35us; 3us; 37us; 4us; 36us; 6us; 32us; 13us; 56us; 1us; 16406us; 15us; 60us; 0us; 16407us; 0us; 16408us; 4us; 16431us; 2us; 35us; 3us; 37us; 4us; 36us; 13us; 30us; 3us; 16433us; 2us; 35us; 3us; 37us; 4us; 36us; 0us; 16409us; 1us; 16436us; 2us; 33us; 0us; 16410us; 0us; 16411us; 0us; 16412us; 0us; 16413us; 0us; 16414us; 3us; 16424us; 8us; 47us; 9us; 46us; 12us; 39us; 3us; 16421us; 2us; 48us; 8us; 47us; 9us; 46us; 0us; 16415us; 0us; 16416us; 3us; 16430us; 8us; 47us; 9us; 46us; 12us; 43us; 3us; 16427us; 2us; 53us; 8us; 47us; 9us; 46us; 0us; 16417us; 0us; 16418us; 0us; 16419us; 0us; 16420us; 0us; 16422us; 0us; 16423us; 2us; 32768us; 8us; 47us; 9us; 46us; 0us; 16425us; 0us; 16426us; 0us; 16428us; 0us; 16429us; 0us; 16432us; 3us; 16435us; 2us; 35us; 3us; 37us; 4us; 36us; 0us; 16434us; 0us; 16437us; 0us; 16438us; 0us; 16440us; 0us; 16442us; 0us; 16443us; 0us; 16444us; 0us; 16445us; 0us; 16446us; 0us; 16447us; 0us; 16448us; 0us; 16449us; 0us; 16450us; 0us; 16451us; 0us; 16452us; 0us; 16453us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 16us; 17us; 19us; 20us; 21us; 23us; 24us; 25us; 27us; 28us; 32us; 33us; 34us; 35us; 49us; 50us; 51us; 65us; 66us; 78us; 90us; 91us; 92us; 93us; 94us; 100us; 102us; 103us; 104us; 109us; 113us; 114us; 116us; 117us; 118us; 119us; 120us; 121us; 125us; 129us; 130us; 131us; 135us; 139us; 140us; 141us; 142us; 143us; 144us; 145us; 148us; 149us; 150us; 151us; 152us; 153us; 157us; 158us; 159us; 160us; 161us; 162us; 163us; 164us; 165us; 166us; 167us; 168us; 169us; 170us; 171us; 172us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 2us; 1us; 1us; 2us; 1us; 2us; 2us; 2us; 1us; 2us; 1us; 2us; 1us; 2us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 3us; 2us; 1us; 1us; 1us; 1us; 3us; 1us; 3us; 1us; 1us; 1us; 2us; 3us; 2us; 1us; 2us; 1us; 2us; 3us; 2us; 1us; 1us; 2us; 2us; 2us; 1us; 1us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 1us; 2us; 2us; 2us; 3us; 3us; 4us; 4us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 8us; 8us; 9us; 9us; 9us; 9us; 10us; 10us; 11us; 11us; 11us; 12us; 12us; 12us; 13us; 13us; 14us; 14us; 15us; 15us; 16us; 16us; 16us; 16us; 16us; 16us; 17us; 17us; 17us; 17us; 18us; 18us; 18us; 18us; 18us; 18us; 19us; 19us; 20us; 21us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 65535us; 16387us; 16389us; 65535us; 16390us; 65535us; 16392us; 16393us; 16394us; 65535us; 16396us; 16397us; 65535us; 16398us; 65535us; 65535us; 16401us; 16402us; 16403us; 16404us; 65535us; 65535us; 16407us; 16408us; 65535us; 65535us; 16409us; 65535us; 16410us; 16411us; 16412us; 16413us; 16414us; 65535us; 65535us; 16415us; 16416us; 65535us; 65535us; 16417us; 16418us; 16419us; 16420us; 16422us; 16423us; 65535us; 16425us; 16426us; 16428us; 16429us; 16432us; 65535us; 16434us; 16437us; 16438us; 16440us; 16442us; 16443us; 16444us; 16445us; 16446us; 16447us; 16448us; 16449us; 16450us; 16451us; 16452us; 16453us; |]
let _fsyacc_reductions ()  =    [| 
# 283 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : CompilationUnit)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 292 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'compilationUnit)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                                                 _1 
                   )
# 70 "Parser.fsy"
                 : CompilationUnit));
# 303 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                 {Usings = []; Declarations = []; } 
                   )
# 71 "Parser.fsy"
                 : CompilationUnit));
# 313 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                                              TestDeclaration.Full(_2, posRange parseState 1, posRange parseState 2) 
                   )
# 74 "Parser.fsy"
                 : 'testHeader));
# 324 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Parser.fsy"
                               
                                 (endPos parseState 1, ErrMsg.TestNameIsNotDefined) ||> reportPointI
                                 TestDeclaration.Partial(posRange parseState 1)
                             
                   )
# 76 "Parser.fsy"
                 : 'testHeader));
# 337 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'any)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                               
                                 let errPos, errToken = _1
                                 let term = TestDeclaration.Error(errPos, errToken)
                                 (errPos, ErrMsg.TestHeaderExpected) ||> reportRangeI
                                 (errPos, TestDeclarationTerm term)  ||> addTestIdx
                                 
                                 term
                             
                   )
# 81 "Parser.fsy"
                 : 'testHeader));
# 355 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'using)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'usings)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "Parser.fsy"
                                          _1::_2 
                   )
# 91 "Parser.fsy"
                 : 'usings));
# 367 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'using)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsy"
                                          [ _1 ] 
                   )
# 92 "Parser.fsy"
                 : 'usings));
# 378 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "Parser.fsy"
                                         
                                         let term = Using.Fqn(_2, posRangeOut parseState 1 2)
                                         (posRangeOut parseState 1 2, UsingTerm term) ||> addTestIdx
                                         term
                                       
                   )
# 95 "Parser.fsy"
                 : 'using));
# 393 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "Parser.fsy"
                                        
                                         let term = Using.Iqn(_2, posRangeOut parseState 1 2)
                                         (posRangeOut parseState 1 2, UsingTerm term) ||> addTestIdx
                                         term
                                       
                   )
# 100 "Parser.fsy"
                 : 'using));
# 408 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "Parser.fsy"
                                        
                                         let term = Using.Fqn(_2, posRangeOut parseState 1 2)
                                         (posRangeOut parseState 1 2, UsingTerm term) ||> addTestIdx
                                         (posRange parseState 2, ErrMsg.IncompleteName _2) ||> reportRangeI
                                         term
                                       
                   )
# 105 "Parser.fsy"
                 : 'using));
# 424 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "Parser.fsy"
                                        
                                         let term = Using.Orphan(posRange parseState 1)
                                         (posRange parseState 1, UsingTerm term) ||> addTestIdx
                                         (endPos parseState 1, ErrMsg.MissingNamespace) ||> reportPointI
                                         term
                                       
                   )
# 111 "Parser.fsy"
                 : 'using));
# 439 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'usings)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'tests)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "Parser.fsy"
                                         
                                         {Usings = useValidUsings _1; Declarations = _2; }
                                        
                   )
# 119 "Parser.fsy"
                 : 'compilationUnit));
# 453 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tests)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "Parser.fsy"
                                         
                                         {Usings = []; Declarations = _1; } 
                                        
                   )
# 122 "Parser.fsy"
                 : 'compilationUnit));
# 466 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'testBody)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'tests)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "Parser.fsy"
                                            _1::_2 
                   )
# 127 "Parser.fsy"
                 : 'tests));
# 478 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'testBody)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "Parser.fsy"
                                            [_1] 
                   )
# 128 "Parser.fsy"
                 : 'tests));
# 489 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'testHeader)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expressionSet)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "Parser.fsy"
                              
                                 (posRange parseState 1, _1 |> TestDeclarationTerm) ||> addIdx
                                 (posRange parseState 1, _1 |> TestDeclarationTerm) ||> addTestIdx
                                 let boolFlags1, boolFlags2, registrations = separate _2
                                 Test(_1, boolFlags1, boolFlags2, registrations, posRangeOut parseState 1 2)
                             
                   )
# 132 "Parser.fsy"
                 : 'testBody));
# 506 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expressionSet)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'bodyExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "Parser.fsy"
                                                           _2::_1 |> List.rev 
                   )
# 140 "Parser.fsy"
                 : 'expressionSet));
# 518 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bodyExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "Parser.fsy"
                                             [_1] 
                   )
# 141 "Parser.fsy"
                 : 'expressionSet));
# 529 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'boolFlag1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "Parser.fsy"
                                       
                                         (posRange parseState 1, _1 |> BoolFlag1Term) ||> addIdx
                                         (posRange parseState 1, _1 |> BoolFlag1Term) ||> addTestIdx
                                         BoolFlag1(_1)
                                     
                   )
# 145 "Parser.fsy"
                 : 'bodyExpression));
# 544 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'boolFlag2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "Parser.fsy"
                                       
                                         (posRange parseState 1, _1 |> BoolFlag2Term) ||> addIdx
                                         (posRange parseState 1, _1 |> BoolFlag2Term) ||> addTestIdx
                                         BoolFlag2(_1)
                                     
                   )
# 151 "Parser.fsy"
                 : 'bodyExpression));
# 559 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'registrationSet)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "Parser.fsy"
                                             Registration(_1 |> List.rev) 
                   )
# 156 "Parser.fsy"
                 : 'bodyExpression));
# 570 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'errorExprBody)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "Parser.fsy"
                                             
                                               let pos  = posRange parseState 1
                                               let term = pos |> ErrorTerm.Error
                                               (pos, (term, _1) |> IndexTerm.Error) ||> addIdx
                                               (pos, (term, _1) |> IndexTerm.Error) ||> addTestIdx
                                               term |> Declaration.Error
                                           
                   )
# 157 "Parser.fsy"
                 : 'bodyExpression));
# 587 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'registration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "Parser.fsy"
                                         
                                            (posRange parseState 1, _1 |> RegistrationTerm) ||> addIdx
                                            (posRange parseState 1, _1 |> RegistrationTerm) ||> addTestIdx
                                            [_1]
                                        
                   )
# 166 "Parser.fsy"
                 : 'registrationSet));
# 602 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'registrationSet)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'registration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "Parser.fsy"
                                          
                                            (posRange parseState 2, _2 |> RegistrationTerm) ||> addIdx
                                            (posRange parseState 2, _2 |> RegistrationTerm) ||> addTestIdx
                                            _2::_1 
                                        
                   )
# 172 "Parser.fsy"
                 : 'registrationSet));
# 618 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'name)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'name)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 "Parser.fsy"
                                               Class(_1, _3, posRange parseState 1, posRange parseState 2, posRange parseState 3) 
                   )
# 179 "Parser.fsy"
                 : 'registration));
# 630 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 180 "Parser.fsy"
                                               Module(_2, posRange parseState 1, posRange parseState 2) 
                   )
# 180 "Parser.fsy"
                 : 'registration));
# 641 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'errorRegistration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 181 "Parser.fsy"
                                            _1 
                   )
# 181 "Parser.fsy"
                 : 'registration));
# 652 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 184 "Parser.fsy"
                                   _1 
                   )
# 184 "Parser.fsy"
                 : 'name));
# 663 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 185 "Parser.fsy"
                                   _1 
                   )
# 185 "Parser.fsy"
                 : 'name));
# 674 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 186 "Parser.fsy"
                                   
                                   let lexbuf = parseState.ParserLocalStore.["LexBuffer"] :?> LexBuffer<char>
                                   (posRange parseState 1, ErrMsg.IncompleteName (new string(lexbuf.Lexeme))) ||> reportRangeI
                                   _1
                                 
                   )
# 186 "Parser.fsy"
                 : 'name));
# 689 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'boolValue)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 193 "Parser.fsy"
                                              BoolFlag1.Flag(_3,  posRange parseState 1, startPos parseState 2, posRange parseState 3) 
                   )
# 193 "Parser.fsy"
                 : 'boolFlag1));
# 700 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'errorBoolFlag1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 194 "Parser.fsy"
                                              _1 
                   )
# 194 "Parser.fsy"
                 : 'boolFlag1));
# 711 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'boolValue)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 197 "Parser.fsy"
                                              BoolFlag2.Flag(_3,  posRange parseState 1, startPos parseState 2, posRange parseState 3) 
                   )
# 197 "Parser.fsy"
                 : 'boolFlag2));
# 722 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'errorBoolFlag2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 198 "Parser.fsy"
                                              _1 
                   )
# 198 "Parser.fsy"
                 : 'boolFlag2));
# 733 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 201 "Parser.fsy"
                                   true  
                   )
# 201 "Parser.fsy"
                 : 'boolValue));
# 743 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 202 "Parser.fsy"
                                   false 
                   )
# 202 "Parser.fsy"
                 : 'boolValue));
# 753 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 205 "Parser.fsy"
                                           
                                             (endPos parseState 2, ErrMsg.BoolMissing) ||> reportPointI
                                             BoolFlag1.Error(BoolFlagMissingPart.Value(endPos parseState 2, startPos parseState 1))
                                         
                   )
# 205 "Parser.fsy"
                 : 'errorBoolFlag1));
# 766 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 209 "Parser.fsy"
                                           
                                             let lexbuf   = parseState.ParserLocalStore.["LexBuffer"] :?> LexBuffer<char>
                                             let errToken = new string(lexbuf.Lexeme)
                                             let errPos   = posRange parseState 3
                                             (errPos, ErrMsg.UnexpectedToken errToken) ||> reportRangeI
                                             BoolFlag1.Error(BoolFlagMissingPart.IncompleteValue(errPos, errToken))
                                         
                   )
# 209 "Parser.fsy"
                 : 'errorBoolFlag1));
# 783 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'boolValue)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 216 "Parser.fsy"
                                           
                                            (endPos parseState 1, ErrMsg.EqMissing) ||> reportPointI
                                            BoolFlag1.Error(BoolFlagMissingPart.EqualBetween(posRangeIn parseState 1 2))
                                         
                   )
# 216 "Parser.fsy"
                 : 'errorBoolFlag1));
# 797 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 220 "Parser.fsy"
                                           
                                             (endPos parseState 1, ErrMsg.EqMissing) ||> reportPointI
                                             BoolFlag1.Error(BoolFlagMissingPart.EqualAfter(endPos parseState 1))
                                         
                   )
# 220 "Parser.fsy"
                 : 'errorBoolFlag1));
# 810 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'boolValue)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 224 "Parser.fsy"
                                          
                                            (startPos parseState 1, ErrMsg.BoolFlagTokenExpected) ||> reportPointI
                                            BoolFlag1.Error(BoolFlagMissingPart.BoolFlagTerm(startPos parseState 1)) 
                                         
                   )
# 224 "Parser.fsy"
                 : 'errorBoolFlag1));
# 824 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'boolValue)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 228 "Parser.fsy"
                                          
                                            (startPos parseState 1, ErrMsg.BoolFlagTokenExpected) ||> reportPointI
                                            BoolFlag1.Error(BoolFlagMissingPart.BoolFlagTerm(startPos parseState 1))
                                         
                   )
# 228 "Parser.fsy"
                 : 'errorBoolFlag1));
# 838 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 234 "Parser.fsy"
                                           
                                             (endPos parseState 2, ErrMsg.BoolMissing) ||> reportPointI
                                             BoolFlag2.Error(BoolFlagMissingPart.Value(endPos parseState 2, startPos parseState 1))
                                         
                   )
# 234 "Parser.fsy"
                 : 'errorBoolFlag2));
# 851 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 238 "Parser.fsy"
                                           
                                             let lexbuf   = parseState.ParserLocalStore.["LexBuffer"] :?> LexBuffer<char>
                                             let errToken = new string(lexbuf.Lexeme)
                                             let errPos   = posRange parseState 3
                                             (errPos, ErrMsg.UnexpectedToken errToken) ||> reportRangeI
                                             BoolFlag2.Error(BoolFlagMissingPart.IncompleteValue(errPos, errToken))
                                         
                   )
# 238 "Parser.fsy"
                 : 'errorBoolFlag2));
# 868 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'boolValue)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 245 "Parser.fsy"
                                             
                                             (endPos parseState 1, ErrMsg.EqMissing) ||> reportPointI
                                             BoolFlag2.Error(BoolFlagMissingPart.EqualBetween(posRangeIn parseState 1 2))
                                         
                   )
# 245 "Parser.fsy"
                 : 'errorBoolFlag2));
# 882 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 249 "Parser.fsy"
                                           
                                             (endPos parseState 1, ErrMsg.EqMissing) ||> reportPointI
                                             BoolFlag2.Error(BoolFlagMissingPart.EqualAfter(endPos parseState 1))
                                         
                   )
# 249 "Parser.fsy"
                 : 'errorBoolFlag2));
# 895 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'name)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 255 "Parser.fsy"
                                       
                                        (endPos parseState 1, ErrMsg.ArrowMissing) ||> reportPointI
                                        ClassError(ClassRegMissingPart.ArrowAfter(endPos parseState 1)) 
                                      
                   )
# 255 "Parser.fsy"
                 : 'errorRegistration));
# 909 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'name)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'name)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 259 "Parser.fsy"
                                     
                                        (endPos parseState 1, ErrMsg.ArrowMissing) ||> reportPointI
                                        ClassError(ClassRegMissingPart.ArrowBetween(posRangeIn parseState 1 2)) 
                                      
                   )
# 259 "Parser.fsy"
                 : 'errorRegistration));
# 924 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'name)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 263 "Parser.fsy"
                                     
                                        (endPos parseState 2, ErrMsg.FqnMissing) ||> reportPointI
                                        ClassError(ClassRegMissingPart.ImplName(endPos parseState 2))
                                      
                   )
# 263 "Parser.fsy"
                 : 'errorRegistration));
# 938 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'name)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 267 "Parser.fsy"
                                        
                                        (endPos parseState 1, ErrMsg.FqnMissing) ||> reportPointI
                                        ClassError(ClassRegMissingPart.DepName(posRangeOut parseState 1 2))
                                      
                   )
# 267 "Parser.fsy"
                 : 'errorRegistration));
# 952 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 271 "Parser.fsy"
                                   
                                      (startPos parseState 1, ErrMsg.OrphanArrow) ||> reportPointI
                                      ClassError(ClassRegMissingPart.OrphanArrow(posRange parseState 1))
                                  
                   )
# 271 "Parser.fsy"
                 : 'errorRegistration));
# 965 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 275 "Parser.fsy"
                                 
                                      (endPos parseState 1, ErrMsg.FqnMissing) ||> reportPointI
                                      ModuleError(ModuleRegMissingPart.Name(endPos parseState 1))
                                  
                   )
# 275 "Parser.fsy"
                 : 'errorRegistration));
# 978 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'errorExprBody)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 281 "Parser.fsy"
                                                   _2::_1 
                   )
# 281 "Parser.fsy"
                 : 'errorExprBody));
# 990 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'recover)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 282 "Parser.fsy"
                                                   [ _1 ] 
                   )
# 282 "Parser.fsy"
                 : 'errorExprBody));
# 1001 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 285 "Parser.fsy"
                                   
                                     let lexbuf   = parseState.ParserLocalStore.["LexBuffer"] :?> LexBuffer<char>
                                     let posRange = (lexbuf.StartPos, lexbuf.EndPos)
                                     let errToken = new string(lexbuf.Lexeme)
                                     (posRange, ErrMsg.UnexpectedToken errToken) ||>reportRangeI
                                     (posRange, errToken)
                                 
                   )
# 285 "Parser.fsy"
                 : 'errToken));
# 1018 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 295 "Parser.fsy"
                              
                                 let lexbuf   = parseState.ParserLocalStore.["LexBuffer"] :?> LexBuffer<char>
                                 let posRange = (lexbuf.StartPos, lexbuf.EndPos)
                                 let errToken = new string(lexbuf.Lexeme)
                                 (posRange, ErrMsg.UnexpectedToken errToken) ||>reportRangeI
                                 (posRange, errToken)
                             
                   )
# 295 "Parser.fsy"
                 : 'recover));
# 1034 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 304 "Parser.fsy"
                                          posRangeAndToken parseState 
                   )
# 304 "Parser.fsy"
                 : 'any));
# 1044 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 305 "Parser.fsy"
                                          posRangeAndToken parseState 
                   )
# 305 "Parser.fsy"
                 : 'any));
# 1054 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 306 "Parser.fsy"
                                          posRangeAndToken parseState 
                   )
# 306 "Parser.fsy"
                 : 'any));
# 1064 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 307 "Parser.fsy"
                                          posRangeAndToken parseState 
                   )
# 307 "Parser.fsy"
                 : 'any));
# 1074 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 308 "Parser.fsy"
                                          posRangeAndToken parseState 
                   )
# 308 "Parser.fsy"
                 : 'any));
# 1084 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 309 "Parser.fsy"
                                          posRangeAndToken parseState 
                   )
# 309 "Parser.fsy"
                 : 'any));
# 1094 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 310 "Parser.fsy"
                                          posRangeAndToken parseState 
                   )
# 310 "Parser.fsy"
                 : 'any));
# 1104 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 311 "Parser.fsy"
                                          posRangeAndToken parseState 
                   )
# 311 "Parser.fsy"
                 : 'any));
# 1114 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 312 "Parser.fsy"
                                          posRangeAndToken parseState 
                   )
# 312 "Parser.fsy"
                 : 'any));
# 1124 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 313 "Parser.fsy"
                                          posRangeAndToken parseState 
                   )
# 313 "Parser.fsy"
                 : 'any));
# 1134 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 314 "Parser.fsy"
                                          posRangeAndToken parseState 
                   )
# 314 "Parser.fsy"
                 : 'any));
# 1145 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 315 "Parser.fsy"
                                          posRangeAndToken parseState 
                   )
# 315 "Parser.fsy"
                 : 'any));
# 1156 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 316 "Parser.fsy"
                                          posRangeAndToken parseState 
                   )
# 316 "Parser.fsy"
                 : 'any));
|]
# 1168 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 18;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : CompilationUnit =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
